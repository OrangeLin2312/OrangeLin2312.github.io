<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于Hexo</title>
      <link href="/2024/12/09/%E5%85%B3%E4%BA%8EHexo/"/>
      <url>/2024/12/09/%E5%85%B3%E4%BA%8EHexo/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo的cdn和pjax是拿来干嘛的"><a href="#hexo的cdn和pjax是拿来干嘛的" class="headerlink" title="hexo的cdn和pjax是拿来干嘛的"></a>hexo的cdn和pjax是拿来干嘛的</h1><p>Hexo 是一个快速、简单且强大的博客框架，它使用 Markdown（或其他渲染引擎）解析文章，并通过主题系统生成静态网站。CDN 和 PJAX 是两种不同的技术，它们可以一起使用来提高网站的性能和用户体验。</p><ol><li>CDN（内容分发网络）：<br>CDN 是一种分布式网络系统，它的主要作用是通过缓存网站内容在多个服务器上，从而减少用户访问网站时的延迟。当用户请求某个资源时，CDN 会根据用户的地理位置选择最近的服务器来提供服务，这样可以加快页面加载速度，提高用户体验。</li></ol><p>在 Hexo 中，你可以将静态资源（如图片、CSS 和 JavaScript 文件）托管到 CDN 上，以提高网站的加载速度。通常，你需要在主题的配置文件中设置 CDN 地址，然后在构建和部署网站时，将静态资源上传到 CDN。</p><ol start="2"><li>PJAX（PushState + AJAX）：<br>PJAX 是一种优化网站导航的技术，它结合了 HTML5 的 PushState API 和 AJAX 请求。通过 PJAX，当用户在网站上点击链接时，页面的内容会通过 AJAX 请求加载，而不是重新加载整个页面。这样可以减少页面切换时的延迟，提高用户体验。</li></ol><p>在 Hexo 中，你可以使用 PJAX 插件来实现 PJAX 功能。当用户点击链接时，插件会拦截请求，然后通过 AJAX 请求新页面的内容，并将其插入到当前页面中。这样，只有部分内容发生变化，而不是整个页面重新加载。</p><p>总结一下，CDN 和 PJAX 是两种不同的技术，它们可以一起使用来提高网站的性能和用户体验。CDN 主要用于加速静态资源的加载，而 PJAX 则用于优化页面导航。在 Hexo 中，你可以通过配置和插件来实现这些功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 腾讯元宝 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习前端3件套</title>
      <link href="/2024/12/07/%E5%AD%A6%E4%B9%A0%E5%89%8D%E7%AB%AF3%E4%BB%B6%E5%A5%97/"/>
      <url>/2024/12/07/%E5%AD%A6%E4%B9%A0%E5%89%8D%E7%AB%AF3%E4%BB%B6%E5%A5%97/</url>
      
        <content type="html"><![CDATA[<div class="aplayer" data-id="000PeZCQ1i4XVs" data-server="tencent" data-type="artist" data-mutex="true" data-preload="auto" data-theme="#3F51B5"></div><h1 id="display-grid"><a href="#display-grid" class="headerlink" title="display:grid"></a>display:grid</h1><h2 id="display：grid是怎么用"><a href="#display：grid是怎么用" class="headerlink" title="display：grid是怎么用"></a>display：grid是怎么用</h2><p><code>display: grid;</code> 是 CSS 中的一个属性值，用于创建一个二维布局系统，允许你通过行和列来组织页面上的元素。以下是如何使用 <code>display: grid;</code> 的基本步骤：</p><h3 id="1-设置容器"><a href="#1-设置容器" class="headerlink" title="1. 设置容器"></a>1. 设置容器</h3><p>首先，你需要选择一个容器元素，并将其 <code>display</code> 属性设置为 <code>grid</code> 或 <code>inline-grid</code>。<code>grid</code> 会使容器占据整个宽度，而 <code>inline-grid</code> 会使容器仅占据必要的宽度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-定义网格模板"><a href="#2-定义网格模板" class="headerlink" title="2. 定义网格模板"></a>2. 定义网格模板</h3><p>接下来，你需要定义网格的行和列。这可以通过 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 属性来完成。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>; <span class="comment">/* 定义三列，每列宽度为100px */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">50px</span> <span class="number">50px</span>; <span class="comment">/* 定义两行，每行高度为50px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-放置子元素"><a href="#3-放置子元素" class="headerlink" title="3. 放置子元素"></a>3. 放置子元素</h3><p>现在，你可以将子元素放置在网格中。你可以使用 <code>grid-column</code> 和 <code>grid-row</code> 属性来指定子元素的位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>; <span class="comment">/* 从第一列开始，到第三列结束 */</span></span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>; <span class="comment">/* 在第一行 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">4</span>; <span class="comment">/* 从第二列开始，到第四列结束 */</span></span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span>; <span class="comment">/* 在第二行 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-完整示例"><a href="#4-完整示例" class="headerlink" title="4. 完整示例"></a>4. 完整示例</h3><p>以下是一个完整的示例，展示了如何使用 <code>display: grid;</code> 创建一个简单的网格布局。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Grid Layout Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">grid-template-rows</span>: <span class="number">50px</span> <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">gap</span>: <span class="number">10px</span>; <span class="comment">/* 设置网格之间的间距 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item1&quot;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item2&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item3&quot;</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item4&quot;</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，我们创建了一个包含四个子元素的网格布局。每个子元素都有一个类名为 <code>item</code>，并且通过 <code>grid-column</code> 和 <code>grid-row</code> 属性放置在网格中的特定位置。</p><h3 id="5-更多属性"><a href="#5-更多属性" class="headerlink" title="5. 更多属性"></a>5. 更多属性</h3><p>除了基本的 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 属性外，CSS Grid 还提供了许多其他属性来控制网格的布局和样式，例如：</p><ul><li><code>grid-column-gap</code> 和 <code>grid-row-gap</code>：设置列和行之间的间距。</li><li><code>gap</code>：设置列和行之间的间距（简写属性）。</li><li><code>grid-template-areas</code>：通过命名区域来定义网格布局。</li><li><code>grid-auto-columns</code> 和 <code>grid-auto-rows</code>：定义自动生成的列和行的大小。</li><li><code>justify-items</code> 和 <code>align-items</code>：控制子元素在网格单元格中的对齐方式。</li><li><code>justify-self</code> 和 <code>align-self</code>：控制单个子元素在网格单元格中的对齐方式。</li></ul><p>通过这些属性，你可以创建出非常复杂和灵活的网格布局。</p><h2 id="详细解释参数"><a href="#详细解释参数" class="headerlink" title="详细解释参数"></a>详细解释参数</h2><p><code>grid-template-columns: 1fr 1fr;</code> 是 CSS Grid 布局中用于定义列宽的一种方式。这里的 <code>fr</code> 是 “fraction”（分数）的缩写，表示将容器可用空间划分为等份，每一份称为一个 <code>fr</code> 单位。</p><p>在这个例子中：</p><ul><li><code>grid-template-columns: 1fr 1fr;</code> 表示将容器的宽度分为两份相等的部分。</li><li>第一个 <code>1fr</code> 表示第一列占据容器宽度的 1&#x2F;2。</li><li>第二个 <code>1fr</code> 表示第二列也占据容器宽度的 1&#x2F;2。</li></ul><p>因此，这种设置会使得两列各占容器宽度的一半，无论容器的实际宽度是多少。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设你有一个容器，其宽度为 600px：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，第一列和第二列各占 300px（即 600px 的一半）。</p><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><p>你还可以使用 <code>fr</code> 单位来创建不等宽的列：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr; <span class="comment">/* 第一列占 1/3，第二列占 2/3 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，第一列占据容器宽度的 1&#x2F;3，而第二列占据容器宽度的 2&#x2F;3。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>grid-template-columns: 1fr 1fr;</code> 表示将容器的宽度分为两份相等的部分，每一列各占一半。这种设置非常适合创建等宽的列布局。</p><h2 id="如果想要实现自适应怎么办"><a href="#如果想要实现自适应怎么办" class="headerlink" title="如果想要实现自适应怎么办"></a>如果想要实现自适应怎么办</h2><p>在使用<code>display: grid</code>的布局中实现多列自适应通常涉及到设置<code>grid-template-columns</code>属性为一个或多个响应式单位，如百分比、<code>fr</code>单位（等分剩余空间）或<code>auto-fit</code>&#x2F;<code>minmax()</code>函数。以下是一些实现多列自适应的方法：</p><h3 id="使用百分比"><a href="#使用百分比" class="headerlink" title="使用百分比"></a>使用百分比</h3><p>通过将<code>grid-template-columns</code>设置为百分比，可以让列根据容器的宽度自适应。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="built_in">minmax</span>(<span class="number">200px</span>, <span class="number">1</span>fr));</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>repeat(auto-fit, minmax(200px, 1fr))</code>表示创建多个列，每列的最小宽度为200px，最大宽度为等分剩余空间（1fr）。<code>auto-fit</code>会根据容器的宽度自动调整列的数量。</p><h3 id="使用fr单位"><a href="#使用fr单位" class="headerlink" title="使用fr单位"></a>使用<code>fr</code>单位</h3><p><code>fr</code>单位代表网格容器中的剩余空间份数。通过设置<code>grid-template-columns</code>为<code>1fr</code>，可以让列等分剩余空间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="built_in">minmax</span>(<span class="number">200px</span>, <span class="number">1</span>fr));</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>minmax(200px, 1fr)</code>确保每列至少有200px宽，并且会等分剩余空间。</p><h3 id="使用auto-fit和minmax"><a href="#使用auto-fit和minmax" class="headerlink" title="使用auto-fit和minmax()"></a>使用<code>auto-fit</code>和<code>minmax()</code></h3><p><code>auto-fit</code>和<code>minmax()</code>函数结合使用可以创建自适应的列布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="built_in">minmax</span>(<span class="number">200px</span>, <span class="number">1</span>fr));</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>auto-fit</code>会根据容器的宽度自动调整列的数量，而<code>minmax(200px, 1fr)</code>确保每列至少有200px宽，并且会等分剩余空间。</p><h3 id="使用媒体查询"><a href="#使用媒体查询" class="headerlink" title="使用媒体查询"></a>使用媒体查询</h3><p>你也可以使用媒体查询来根据不同的屏幕尺寸设置不同的列数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="built_in">minmax</span>(<span class="number">200px</span>, <span class="number">1</span>fr));</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">900px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，当屏幕宽度大于等于600px时，列数变为2；当屏幕宽度大于等于900px时，列数变为3。</p><p>通过这些方法，你可以实现多列自适应的<code>display: grid</code>布局。</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> jquery </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI百问</title>
      <link href="/2024/12/02/AI%E7%99%BE%E9%97%AE/"/>
      <url>/2024/12/02/AI%E7%99%BE%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1问：mybatis映射那些事情"><a href="#1问：mybatis映射那些事情" class="headerlink" title="1问：mybatis映射那些事情"></a>1问：mybatis映射那些事情</h1><h2 id="MyBatis-的使用方式"><a href="#MyBatis-的使用方式" class="headerlink" title="MyBatis &lt;resultMap&gt;的使用方式"></a>MyBatis <code>&lt;resultMap&gt;</code>的使用方式</h2><p>当然可以！MyBatis 的 <code>&lt;resultMap&gt;</code> 是用于定义 SQL 查询结果如何映射到 Java<br>对象的配置元素。它允许你指定字段到对象属性的映射关系，并支持复杂的数据结构如嵌套对象和集合。下面是具体的使用方法和示例。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="1-定义-resultMap"><a href="#1-定义-resultMap" class="headerlink" title="1. 定义 resultMap"></a>1. <strong>定义 <code>resultMap</code></strong></h4><p>在 MyBatis 中，你需要在 XML 配置文件中定义 <code>&lt;resultMap&gt;</code> 元素，用于映射 SQL 查询结果到 Java 对象。</p><p><strong>示例：</strong></p><p>假设你有一个 <code>User</code> 类，它包含 <code>id</code>, <code>name</code>, 和 <code>age</code> 属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以在 MyBatis XML 映射文件中定义 <code>resultMap</code> 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>resultMap id<span class="operator">=</span>&quot;userResultMap&quot; type<span class="operator">=</span>&quot;com.example.User&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>id property<span class="operator">=</span>&quot;id&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;user_id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;name&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;user_name&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;age&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;user_age&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>resultMap<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>id</code> 元素用于标识主键。</li><li><code>result</code> 元素用于映射普通字段。</li></ul><h4 id="2-使用-resultMap"><a href="#2-使用-resultMap" class="headerlink" title="2. 使用 resultMap"></a>2. <strong>使用 <code>resultMap</code></strong></h4><p>在你的 SQL 映射中，你可以引用这个 <code>resultMap</code> 来映射查询结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span></span><br><span class="line"><span class="keyword">select</span> id <span class="operator">=</span> &quot;getUserById&quot; resultMap<span class="operator">=</span>&quot;userResultMap&quot;<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SELECT</span> user_id, user_name, user_age</span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">WHERE</span> user_id <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">          <span class="operator">&lt;</span> <span class="operator">/</span></span><br><span class="line"><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><h4 id="1-嵌套映射"><a href="#1-嵌套映射" class="headerlink" title="1. 嵌套映射"></a>1. <strong>嵌套映射</strong></h4><p><code>resultMap</code> 也可以用于嵌套对象的映射。例如，如果你有一个 <code>Order</code> 对象，它包含一个 <code>User</code> 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以定义嵌套的 <code>resultMap</code> 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>resultMap id<span class="operator">=</span>&quot;userResultMap&quot; type<span class="operator">=</span>&quot;com.example.User&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>id property<span class="operator">=</span>&quot;id&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;user_id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;name&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;user_name&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;age&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;user_age&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>resultMap<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span>resultMap id<span class="operator">=</span>&quot;orderResultMap&quot; type<span class="operator">=</span>&quot;com.example.Order&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>id property<span class="operator">=</span>&quot;id&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;order_id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>association property<span class="operator">=</span>&quot;user&quot; javaType<span class="operator">=</span>&quot;com.example.User&quot; resultMap<span class="operator">=</span>&quot;userResultMap&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;status&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;order_status&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>resultMap<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>association</code> 元素用于映射嵌套对象。</li></ul><h4 id="2-集合映射"><a href="#2-集合映射" class="headerlink" title="2. 集合映射"></a>2. <strong>集合映射</strong></h4><p>如果你的对象包含一个集合，可以使用 <code>&lt;collection&gt;</code> 元素。例如，如果 <code>User</code> 对象包含多个 <code>Order</code> 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orders;</span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以在 <code>resultMap</code> 中使用 <code>&lt;collection&gt;</code> 元素：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>resultMap id<span class="operator">=</span>&quot;orderResultMap&quot; type<span class="operator">=</span>&quot;com.example.Order&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>id property<span class="operator">=</span>&quot;id&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;order_id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;status&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;order_status&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>resultMap<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span>resultMap id<span class="operator">=</span>&quot;userResultMap&quot; type<span class="operator">=</span>&quot;com.example.User&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>id property<span class="operator">=</span>&quot;id&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;user_id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;name&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;user_name&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;age&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;user_age&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>collection property<span class="operator">=</span>&quot;orders&quot; ofType<span class="operator">=</span>&quot;com.example.Order&quot; resultMap<span class="operator">=</span>&quot;orderResultMap&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>resultMap<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>collection</code> 元素用于映射集合类型的属性。</li></ul><h4 id="3-使用嵌套-resultMap"><a href="#3-使用嵌套-resultMap" class="headerlink" title="3. 使用嵌套 resultMap"></a>3. <strong>使用嵌套 <code>resultMap</code></strong></h4><p>你也可以在一个 <code>resultMap</code> 中使用另一个 <code>resultMap</code> 来进行更复杂的映射。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>resultMap id<span class="operator">=</span>&quot;orderResultMap&quot; type<span class="operator">=</span>&quot;com.example.Order&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>id property<span class="operator">=</span>&quot;id&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;order_id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;status&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;order_status&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>resultMap<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span>resultMap id<span class="operator">=</span>&quot;userWithOrdersResultMap&quot; type<span class="operator">=</span>&quot;com.example.User&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>id property<span class="operator">=</span>&quot;id&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;user_id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;name&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;user_name&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;age&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;user_age&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>collection property<span class="operator">=</span>&quot;orders&quot; ofType<span class="operator">=</span>&quot;com.example.Order&quot; resultMap<span class="operator">=</span>&quot;orderResultMap&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>resultMap<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong><code>&lt;resultMap&gt;</code></strong> 是 MyBatis 中用于将 SQL 查询结果映射到 Java 对象的关键组件。</li><li><strong>基本用法</strong> 包括将查询结果的列映射到 Java 对象的属性。</li><li><strong>高级用法</strong> 涉及嵌套映射和集合映射，以处理复杂的数据结构。</li></ul><p>通过正确使用 <code>&lt;resultMap&gt;</code>，你可以将复杂的查询结果高效地映射到 Java 对象中，从而提高应用程序的性能和可维护性。</p><h2 id="关于一对一非集合映射"><a href="#关于一对一非集合映射" class="headerlink" title="关于一对一非集合映射"></a>关于一对一非集合映射</h2><p>在MyBatis中，resultMap用于定义如何将数据库查询结果映射到Java对象。对于你的ExamStu类，假设你的数据库表结构与类的字段相对应，以下是一个可能的resultMap配置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>resultMap id<span class="operator">=</span>&quot;ExamStuResultMap&quot; type<span class="operator">=</span>&quot;org.example.Server.model.examination.ExamStu&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">!</span><span class="comment">-- 映射父类 Exam 的字段 --&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>id property<span class="operator">=</span>&quot;exam_id&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;exam_id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;sem_id&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;sem_id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;paper_id&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;paper_id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">!</span><span class="comment">-- 映射 ExamStu 的字段 --&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;stu_exam_id&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;stu_exam_id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">!</span><span class="comment">-- 映射 Student 对象 --&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>association property<span class="operator">=</span>&quot;student&quot; javaType<span class="operator">=</span>&quot;org.example.Server.model.user.Student&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span>id property<span class="operator">=</span>&quot;id&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;student_id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;username&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;student_username&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;img_url&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;student_img_url&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;stu_number&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;student_stu_number&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">/</span>association<span class="operator">&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">!</span><span class="comment">-- 映射 SemDivisonVO 对象 --&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>association property<span class="operator">=</span>&quot;semDivison&quot; javaType<span class="operator">=</span>&quot;org.example.Server.model.semester.SemDivisonVO&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span>id property<span class="operator">=</span>&quot;division_id&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;division_id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;division_name&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;division_name&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">/</span>association<span class="operator">&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">!</span><span class="comment">-- 映射基本类型字段 --&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;start_time&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;start_time&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;submit_time&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;submit_time&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;mark_status&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;mark_status&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;submit_status&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;submit_status&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">result</span> property<span class="operator">=</span>&quot;get_score&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;get_score&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>resultMap<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p><strong>解释</strong></p><ul><li><code>&lt;id&gt;</code> 和 <code>&lt;result&gt;</code>标签：用于映射基本类型和字符串类型的字段。</li><li><code>&lt;association&gt;</code> 标签：用于映射一对一的关系，例如Student和SemDivisonVO对象。</li><li>property 属性：指定Java对象中的属性名。</li><li>column 属性：指定数据库表中的列名。</li></ul><h1 id="2问：sql中的union-all"><a href="#2问：sql中的union-all" class="headerlink" title="2问：sql中的union all"></a>2问：sql中的union all</h1><h2 id="sql中的Union-all"><a href="#sql中的Union-all" class="headerlink" title="sql中的Union all"></a>sql中的Union all</h2><p><code>UNION ALL</code> 是 SQL 中的一个操作符，用于合并多个查询的结果集。它的主要特点包括：</p><ol><li><p><strong>合并结果</strong>：将多个 <code>SELECT</code> 查询的结果结合在一起，形成一个新的结果集。</p></li><li><p><strong>包含重复</strong>：与 <code>UNION</code> 不同，<code>UNION ALL</code> 会保留所有的重复记录。也就是说，如果不同的查询返回相同的行，这些行会在最终结果中出现多次。</p></li><li><p><strong>性能更高</strong>：由于 <code>UNION ALL</code> 不进行重复记录的检查，因此通常比 <code>UNION</code> 更快，适合需要保留所有记录的场景。</p></li></ol><p>总的来说，<code>UNION ALL</code> 是一个有效的工具，用于整合多个查询的结果并保留所有数据。</p><h1 id="3问：mybatis如何分类型存放对象（存疑）"><a href="#3问：mybatis如何分类型存放对象（存疑）" class="headerlink" title="3问：mybatis如何分类型存放对象（存疑）"></a>3问：mybatis如何分类型存放对象（存疑）</h1><h2 id="mybatis的复杂嵌套映射select案例"><a href="#mybatis的复杂嵌套映射select案例" class="headerlink" title="mybatis的复杂嵌套映射select案例"></a>mybatis的复杂嵌套映射select案例</h2><p>假设你有一个 <code>Course</code> 表和一个 <code>Resource</code> 表，<code>Resource</code> 表中有一个 <code>type</code> 字段，存储了资源的类型（video、ppt、pdf）。你需要查询每个课程的所有这三类资源的列表。以下是如何在 MyBatis 中实现这一需求的示例。</p><h3 id="数据库表结构"><a href="#数据库表结构" class="headerlink" title="数据库表结构"></a>数据库表结构</h3><ol><li><p><strong>Course 表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course (</span><br><span class="line">    course_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    course_name <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>Resource 表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Resource (</span><br><span class="line">    resource_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    course_id <span class="type">INT</span>,</span><br><span class="line">    type <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    url <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (course_id) <span class="keyword">REFERENCES</span> Course(course_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><h3 id="MyBatis-映射文件"><a href="#MyBatis-映射文件" class="headerlink" title="MyBatis 映射文件"></a>MyBatis 映射文件</h3><p>假设你的实体类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> courseId;</span><br><span class="line">    <span class="keyword">private</span> String courseName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Resource&gt; videoResources;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Resource&gt; pptResources;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Resource&gt; pdfResources;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters and setters</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> resourceId;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> courseId;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MyBatis-映射文件示例"><a href="#MyBatis-映射文件示例" class="headerlink" title="MyBatis 映射文件示例"></a>MyBatis 映射文件示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.CourseMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;courseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Course&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;courseId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;course_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;courseName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;course_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;videoResources&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Resource&quot;</span> <span class="attr">column</span>=<span class="string">&quot;course_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">select</span>=<span class="string">&quot;selectResourcesByType&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">&quot;type&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;pptResources&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Resource&quot;</span> <span class="attr">column</span>=<span class="string">&quot;course_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">select</span>=<span class="string">&quot;selectResourcesByType&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">&quot;type&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;pdfResources&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Resource&quot;</span> <span class="attr">column</span>=<span class="string">&quot;course_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">select</span>=<span class="string">&quot;selectResourcesByType&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">&quot;type&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCourseWithResources&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;courseResultMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT course_id, course_name</span><br><span class="line">        FROM Course</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectResourcesByType&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Resource&quot;</span>&gt;</span></span><br><span class="line">        SELECT resource_id, course_id, type, url</span><br><span class="line">        FROM Resource</span><br><span class="line">        WHERE course_id = #&#123;course_id&#125; AND type = #&#123;type&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol><li><p><strong><code>courseResultMap</code></strong>:</p><ul><li>定义了一个 <code>resultMap</code>，将 <code>Course</code> 表的字段映射到 <code>Course</code> 类的属性。</li><li>使用 <code>&lt;collection&gt;</code> 标签来映射 <code>videoResources</code>、<code>pptResources</code> 和 <code>pdfResources</code> 属性。</li><li>每个 <code>&lt;collection&gt;</code> 标签使用 <code>select</code> 属性调用 <code>selectResourcesByType</code> 方法，并传递 <code>course_id</code> 和 <code>type</code> 参数。</li></ul></li><li><p><strong><code>selectCourseWithResources</code></strong>:</p><ul><li>查询所有课程的基本信息。</li></ul></li><li><p><strong><code>selectResourcesByType</code></strong>:</p><ul><li>根据 <code>course_id</code> 和 <code>type</code> 查询特定类型的资源。</li></ul></li></ol><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>在你的服务层或控制器中，你可以这样调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Course&gt; courses = courseMapper.selectCourseWithResources();</span><br></pre></td></tr></table></figure><p>这样，你就可以得到每个课程的视频、PPT 和 PDF 资源列表。</p><p>在 MyBatis 中，<code>&lt;collection&gt;</code> 标签用于映射一对多关系，即将一个对象的集合映射到另一个对象的属性中。在你提供的代码片段中，<code>&lt;collection&gt;</code> 标签用于将 <code>Resource</code> 对象的集合映射到 <code>Course</code> 对象的 <code>pdfResources</code> 属性中。</p><p>让我们详细解释一下这个标签的各个部分：</p><ol><li><p><strong><code>property</code></strong>:</p><ul><li><code>property=&quot;pdfResources&quot;</code>: 这指定了 <code>Course</code> 类中的属性名，即 <code>pdfResources</code>，这个属性将包含所有 PDF 类型的资源。</li></ul></li><li><p><strong><code>ofType</code></strong>:</p><ul><li><code>ofType=&quot;Resource&quot;</code>: 这指定了集合中元素的类型，即 <code>Resource</code> 类。</li></ul></li><li><p><strong><code>column</code></strong>:</p><ul><li><code>column=&quot;course_id&quot;</code>: 这指定了传递给嵌套查询的列名，即 <code>course_id</code>。这个列的值将作为参数传递给嵌套查询。</li></ul></li><li><p><strong><code>javaType</code></strong>:</p><ul><li><code>javaType=&quot;ArrayList&quot;</code>: 这指定了集合的 Java 类型，即 <code>ArrayList</code>。</li></ul></li><li><p><strong><code>select</code></strong>:</p><ul><li><code>select=&quot;selectResourcesByType&quot;</code>: 这指定了用于获取集合数据的 SQL 查询方法名，即 <code>selectResourcesByType</code>。</li></ul></li><li><p><strong><code>parameterType</code></strong>:</p><ul><li><code>parameterType=&quot;map&quot;</code>: 这指定了传递给嵌套查询的参数类型，即 <code>map</code>。在这个例子中，<code>map</code> 包含 <code>course_id</code> 和 <code>type</code> 两个键。</li></ul></li><li><p><strong><code>constructor</code></strong>:</p><ul><li><code>&lt;constructor&gt;</code>: 这表示使用构造函数来创建 <code>Resource</code> 对象。</li><li><code>&lt;arg column=&quot;type&quot; javaType=&quot;String&quot;/&gt;</code>: 这表示将 <code>type</code> 列的值传递给 <code>Resource</code> 类的构造函数。</li></ul></li></ol><h3 id="嵌套查询示例"><a href="#嵌套查询示例" class="headerlink" title="嵌套查询示例"></a>嵌套查询示例</h3><p>假设 <code>selectResourcesByType</code> 方法定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectResourcesByType&quot;</span> resultType=<span class="string">&quot;Resource&quot;</span>&gt;</span><br><span class="line">    SELECT resource_id, course_id, type, url</span><br><span class="line">    FROM Resource</span><br><span class="line">    <span class="type">WHERE</span> <span class="variable">course_id</span> <span class="operator">=</span> #&#123;course_id&#125; <span class="type">AND</span> <span class="variable">type</span> <span class="operator">=</span> #&#123;type&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h3><ul><li>当 MyBatis 执行 <code>selectCourseWithResources</code> 查询时，它会为每个 <code>Course</code> 对象调用 <code>selectResourcesByType</code> 方法两次，一次传递 <code>type</code> 为 <code>&quot;pdf&quot;</code>，另一次传递 <code>type</code> 为 <code>&quot;ppt&quot;</code>，还有一次传递 <code>type</code> 为 <code>&quot;video&quot;</code>。</li><li>每次调用 <code>selectResourcesByType</code> 方法时，它会根据传递的 <code>course_id</code> 和 <code>type</code> 查询相应的资源，并将结果映射到 <code>Resource</code> 对象中。</li><li>这些 <code>Resource</code> 对象会被添加到 <code>Course</code> 对象的 <code>pdfResources</code>、<code>pptResources</code> 和 <code>videoResources</code> 属性中。</li></ul><h3 id="示例数据"><a href="#示例数据" class="headerlink" title="示例数据"></a>示例数据</h3><p>假设 <code>Course</code> 表中有以下数据：</p><table><thead><tr><th>course_id</th><th>course_name</th></tr></thead><tbody><tr><td>1</td><td>Course A</td></tr><tr><td>2</td><td>Course B</td></tr></tbody></table><p><code>Resource</code> 表中有以下数据：</p><table><thead><tr><th>resource_id</th><th>course_id</th><th>type</th><th>url</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>pdf</td><td><a href="http://example.com/pdf1">http://example.com/pdf1</a></td></tr><tr><td>2</td><td>1</td><td>ppt</td><td><a href="http://example.com/ppt1">http://example.com/ppt1</a></td></tr><tr><td>3</td><td>1</td><td>video</td><td><a href="http://example.com/video1">http://example.com/video1</a></td></tr><tr><td>4</td><td>2</td><td>pdf</td><td><a href="http://example.com/pdf2">http://example.com/pdf2</a></td></tr><tr><td>5</td><td>2</td><td>ppt</td><td><a href="http://example.com/ppt2">http://example.com/ppt2</a></td></tr><tr><td>6</td><td>2</td><td>video</td><td><a href="http://example.com/video2">http://example.com/video2</a></td></tr></tbody></table><p>执行 <code>selectCourseWithResources</code> 查询后，<code>Course</code> 对象将包含以下资源列表：</p><ul><li><p><code>Course A</code>:</p><ul><li><code>pdfResources</code>: [Resource{id&#x3D;1, course_id&#x3D;1, type&#x3D;’pdf’, url&#x3D;’<a href="http://example.com/pdf1'%7D]">http://example.com/pdf1&#39;}]</a></li><li><code>pptResources</code>: [Resource{id&#x3D;2, course_id&#x3D;1, type&#x3D;’ppt’, url&#x3D;’<a href="http://example.com/ppt1'%7D]">http://example.com/ppt1&#39;}]</a></li><li><code>videoResources</code>: [Resource{id&#x3D;3, course_id&#x3D;1, type&#x3D;’video’, url&#x3D;’<a href="http://example.com/video1'%7D]">http://example.com/video1&#39;}]</a></li></ul></li><li><p><code>Course B</code>:</p><ul><li><code>pdfResources</code>: [Resource{id&#x3D;4, course_id&#x3D;2, type&#x3D;’pdf’, url&#x3D;’<a href="http://example.com/pdf2'%7D]">http://example.com/pdf2&#39;}]</a></li><li><code>pptResources</code>: [Resource{id&#x3D;5, course_id&#x3D;2, type&#x3D;’ppt’, url&#x3D;’<a href="http://example.com/ppt2'%7D]">http://example.com/ppt2&#39;}]</a></li><li><code>videoResources</code>: [Resource{id&#x3D;6, course_id&#x3D;2, type&#x3D;’video’, url&#x3D;’<a href="http://example.com/video2'%7D]">http://example.com/video2&#39;}]</a></li></ul></li></ul><p>通过这种方式，你可以轻松地将不同类型的资源映射到 <code>Course</code> 对象的不同属性中。</p><h1 id="4问：sql中的窗口函数"><a href="#4问：sql中的窗口函数" class="headerlink" title="4问：sql中的窗口函数"></a>4问：sql中的窗口函数</h1><h1 id="mysql的窗口函数"><a href="#mysql的窗口函数" class="headerlink" title="mysql的窗口函数"></a>mysql的窗口函数</h1><p>窗口函数（Window Functions）是SQL查询中的一种高级功能，它允许用户在一个结果集的窗口（即一个子集）上执行计算，而不是在整个结果集上。窗口函数可以用于各种复杂的分析任务，如排名、累计和、移动平均等。</p><h3 id="窗口函数的基本概念"><a href="#窗口函数的基本概念" class="headerlink" title="窗口函数的基本概念"></a>窗口函数的基本概念</h3><ol><li><p><strong>窗口定义</strong>：窗口函数在一个特定的窗口上操作，这个窗口可以是整个结果集，也可以是结果集的一个子集。窗口可以通过 <code>PARTITION BY</code> 子句进行划分，并通过 <code>ORDER BY</code> 子句进行排序。</p></li><li><p><strong>常见的窗口函数</strong>：</p><ul><li><code>ROW_NUMBER()</code>：为每个窗口中的行分配一个唯一的序号。</li><li><code>RANK()</code>：为每个窗口中的行分配一个排名，如果有多个行具有相同的值，则它们会获得相同的排名，并且下一个排名会跳过相应的数量。</li><li><code>DENSE_RANK()</code>：类似于 <code>RANK()</code>，但不会跳过排名。</li><li><code>SUM()</code>, <code>AVG()</code>, <code>MAX()</code>, <code>MIN()</code>：这些聚合函数也可以作为窗口函数使用，计算窗口内的累积和、平均值、最大值和最小值。</li></ul></li></ol><h3 id="示例解释"><a href="#示例解释" class="headerlink" title="示例解释"></a>示例解释</h3><p>在你的示例中，使用了 <code>ROW_NUMBER()</code> 窗口函数来为每个用户的评论分配一个序号，按创建时间降序排列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> RankedComments <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        <span class="operator">*</span>,</span><br><span class="line">        <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> user_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">DESC</span>) <span class="keyword">AS</span> rn</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        comments</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        topic_id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong><code>PARTITION BY user_id</code>：将结果集按 <code>user_id</code> 划分为多个窗口。</strong></li><li><strong><code>ORDER BY created_at DESC</code>：在每个窗口内按 <code>created_at</code> 降序排列。</strong></li><li><strong><code>ROW_NUMBER() OVER (...)</code>：为每个窗口中的行分配一个唯一的序号。</strong></li></ul><h3 id="窗口函数的常见用途"><a href="#窗口函数的常见用途" class="headerlink" title="窗口函数的常见用途"></a>窗口函数的常见用途</h3><ol><li><strong>排名和排序</strong>：如上例所示，可以为行分配排名或序号。</li><li><strong>累积和和移动平均</strong>：计算某个指标的累积和或移动平均值。</li><li><strong>分组和聚合</strong>：在分组数据上进行复杂的聚合计算。</li><li><strong>时间序列分析</strong>：处理时间序列数据，如计算每日、每周或每月的统计数据。</li></ol><h3 id="是否经常使用"><a href="#是否经常使用" class="headerlink" title="是否经常使用"></a>是否经常使用</h3><p>窗口函数在需要复杂分析和报告的场景中非常有用，特别是在以下情况下：</p><ul><li>需要对数据进行分组并进行复杂的计算。</li><li>需要计算排名、累积和或移动平均值。</li><li>需要处理时间序列数据。</li></ul><p>因此，窗口函数在数据分析和报告任务中经常被使用，尤其是在数据仓库和商业智能（BI）系统中。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>窗口函数提供了一种强大的工具，可以在SQL查询中进行复杂的计算和分析。它们在处理分组数据、计算排名和累积值等方面非常有用，并且在数据分析和报告任务中经常被使用。</p><h2 id="例如rank（）"><a href="#例如rank（）" class="headerlink" title="例如rank（）"></a>例如rank（）</h2><p>使用窗口函数进行排名是SQL查询中的一个常见任务。以下是如何使用窗口函数进行排名的基本步骤和示例：</p><h3 id="使用-ROW-NUMBER-进行排名"><a href="#使用-ROW-NUMBER-进行排名" class="headerlink" title="使用 ROW_NUMBER() 进行排名"></a>使用 <code>ROW_NUMBER()</code> 进行排名</h3><p><code>ROW_NUMBER()</code> 函数为每个窗口中的行分配一个唯一的序号。它通常与 <code>PARTITION BY</code> 和 <code>ORDER BY</code> 子句一起使用。</p><h4 id="示例：按销售额对员工进行排名"><a href="#示例：按销售额对员工进行排名" class="headerlink" title="示例：按销售额对员工进行排名"></a>示例：按销售额对员工进行排名</h4><p>假设我们有一个 <code>sales</code> 表，包含员工的销售额信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sales (</span><br><span class="line">    employee_id <span class="type">INT</span>,</span><br><span class="line">    sale_date <span class="type">DATE</span>,</span><br><span class="line">    amount <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们可以使用 <code>ROW_NUMBER()</code> 函数按销售额对员工进行排名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> RankedSales <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        employee_id,</span><br><span class="line">        sale_date,</span><br><span class="line">        amount,</span><br><span class="line">        <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> amount <span class="keyword">DESC</span>) <span class="keyword">AS</span> rank</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        sales</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    employee_id,</span><br><span class="line">    sale_date,</span><br><span class="line">    amount,</span><br><span class="line">    rank</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    RankedSales;</span><br></pre></td></tr></table></figure><p>在这个示例中：</p><ul><li><code>ROW_NUMBER() OVER (ORDER BY amount DESC)</code>：按销售额降序排列，并为每个员工分配一个唯一的排名。</li></ul><h3 id="使用-RANK-进行排名"><a href="#使用-RANK-进行排名" class="headerlink" title="使用 RANK() 进行排名"></a>使用 <code>RANK()</code> 进行排名</h3><p><code>RANK()</code> 函数为每个窗口中的行分配一个排名，如果有多个行具有相同的值，则它们会获得相同的排名，并且下一个排名会跳过相应的数量。</p><h4 id="示例：按销售额对员工进行排名，处理相同销售额的情况"><a href="#示例：按销售额对员工进行排名，处理相同销售额的情况" class="headerlink" title="示例：按销售额对员工进行排名，处理相同销售额的情况"></a>示例：按销售额对员工进行排名，处理相同销售额的情况</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> RankedSales <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        employee_id,</span><br><span class="line">        sale_date,</span><br><span class="line">        amount,</span><br><span class="line">        <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> amount <span class="keyword">DESC</span>) <span class="keyword">AS</span> rank</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        sales</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    employee_id,</span><br><span class="line">    sale_date,</span><br><span class="line">    amount,</span><br><span class="line">    rank</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    RankedSales;</span><br></pre></td></tr></table></figure><p>在这个示例中：</p><ul><li><code>RANK() OVER (ORDER BY amount DESC)</code>：按销售额降序排列，并为每个员工分配一个排名。如果两个员工的销售额相同，它们会获得相同的排名，并且下一个排名会跳过相应的数量。</li></ul><h3 id="使用-DENSE-RANK-进行排名"><a href="#使用-DENSE-RANK-进行排名" class="headerlink" title="使用 DENSE_RANK() 进行排名"></a>使用 <code>DENSE_RANK()</code> 进行排名</h3><p><code>DENSE_RANK()</code> 函数类似于 <code>RANK()</code>，但不会跳过排名。</p><h4 id="示例：按销售额对员工进行排名，处理相同销售额的情况，不跳过排名"><a href="#示例：按销售额对员工进行排名，处理相同销售额的情况，不跳过排名" class="headerlink" title="示例：按销售额对员工进行排名，处理相同销售额的情况，不跳过排名"></a>示例：按销售额对员工进行排名，处理相同销售额的情况，不跳过排名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> RankedSales <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        employee_id,</span><br><span class="line">        sale_date,</span><br><span class="line">        amount,</span><br><span class="line">        <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> amount <span class="keyword">DESC</span>) <span class="keyword">AS</span> rank</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        sales</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    employee_id,</span><br><span class="line">    sale_date,</span><br><span class="line">    amount,</span><br><span class="line">    rank</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    RankedSales;</span><br></pre></td></tr></table></figure><p>在这个示例中：</p><ul><li><code>DENSE_RANK() OVER (ORDER BY amount DESC)</code>：按销售额降序排列，并为每个员工分配一个排名。如果两个员工的销售额相同，它们会获得相同的排名，并且下一个排名不会跳过相应的数量。</li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><code>ROW_NUMBER()</code>：为每个窗口中的行分配一个唯一的序号。</li><li><code>RANK()</code>：为每个窗口中的行分配一个排名，如果有多个行具有相同的值，则它们会获得相同的排名，并且下一个排名会跳过相应的数量。</li><li><code>DENSE_RANK()</code>：类似于 <code>RANK()</code>，但不会跳过排名。</li></ul><p>选择哪种函数取决于具体的需求。如果需要唯一的序号，使用 <code>ROW_NUMBER()</code>；如果需要处理相同值的情况并且希望跳过排名，使用 <code>RANK()</code>；如果需要处理相同值的情况但不希望跳过排名，使用 <code>DENSE_RANK()</code>。</p><h1 id="5问：关于Java一些很基础的回炉重造"><a href="#5问：关于Java一些很基础的回炉重造" class="headerlink" title="5问：关于Java一些很基础的回炉重造"></a>5问：关于Java一些很基础的回炉重造</h1><h2 id="Java中的List迭代器"><a href="#Java中的List迭代器" class="headerlink" title="Java中的List迭代器"></a>Java中的List迭代器</h2><p>在Java中，当使用迭代器（Iterator）遍历集合时，直接通过集合的<code>remove</code>方法删除元素可能会导致<code>ConcurrentModificationException</code>异常。这是因为迭代器和集合都在维护一个修改计数器，当迭代器创建时，它会记录集合的修改次数。如果在迭代过程中，集合的修改次数发生了变化（例如，通过集合的<code>remove</code>方法删除元素），迭代器检测到修改次数不一致，就会抛出<code>ConcurrentModificationException</code>异常。</p><p>使用迭代器的<code>remove</code>方法删除元素更安全，因为它会在删除元素的同时更新迭代器的修改计数器，以确保迭代器和集合的修改次数保持一致。这样就不会触发<code>ConcurrentModificationException</code>异常。</p><p>以下是一个使用迭代器删除元素的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">&quot;B&quot;</span>)) &#123;</span><br><span class="line">        iterator.remove(); <span class="comment">// 使用迭代器的 remove 方法删除元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(list); <span class="comment">// 输出: [A, C]</span></span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用迭代器的<code>remove</code>方法删除了元素”B”，而不会导致<code>ConcurrentModificationException</code>异常。</p><p>相比之下，以下代码使用集合的<code>remove</code>方法删除元素，会导致<code>ConcurrentModificationException</code>异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">&quot;B&quot;</span>)) &#123;</span><br><span class="line">        list.remove(s); <span class="comment">// 使用集合的 remove 方法删除元素，会导致 ConcurrentModificationException 异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之，使用迭代器的<code>remove</code>方法删除元素更安全，因为它会确保迭代器和集合的修改次数保持一致，从而避免<code>ConcurrentModificationException</code>异常。</p><h2 id="关于父类和子类"><a href="#关于父类和子类" class="headerlink" title="关于父类和子类"></a>关于父类和子类</h2><p>是的，你可以将继承了 <code>QsHeader</code> 的类的对象添加到 <code>List&lt;QsHeader&gt;</code> 列表中。这是因为 Java 中的泛型支持协变（covariance），即子类型的对象可以赋值给父类型的引用。</p><p>举个例子，假设你有以下类定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QsHeader</span> &#123;</span><br><span class="line">    <span class="comment">// QsHeader 类的定义</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubQsHeader</span> <span class="keyword">extends</span> <span class="title class_">QsHeader</span> &#123;</span><br><span class="line">    <span class="comment">// SubQsHeader 类的定义，继承自 QsHeader</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以创建一个 <code>List&lt;QsHeader&gt;</code> 列表，并将 <code>SubQsHeader</code> 对象添加到其中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;QsHeader&gt; qs_list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">SubQsHeader</span> <span class="variable">subQsHeader1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubQsHeader</span>();</span><br><span class="line">        <span class="type">SubQsHeader</span> <span class="variable">subQsHeader2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubQsHeader</span>();</span><br><span class="line"></span><br><span class="line">        qs_list.add(subQsHeader1);</span><br><span class="line">        qs_list.add(subQsHeader2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 现在 qs_list 包含了两个 SubQsHeader 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>SubQsHeader</code> 是 <code>QsHeader</code> 的子类，因此可以将 <code>SubQsHeader</code> 对象添加到 <code>List&lt;QsHeader&gt;</code> 列表中。</p><p>需要注意的是，虽然你可以将子类对象添加到父类类型的列表中，但在从列表中检索对象时，你只能将其视为父类类型。如果你需要访问子类特有的方法或属性，你需要进行类型转换。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (QsHeader qsHeader : qs_list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (qsHeader <span class="keyword">instanceof</span> SubQsHeader) &#123;</span><br><span class="line">        <span class="type">SubQsHeader</span> <span class="variable">subQsHeader</span> <span class="operator">=</span> (SubQsHeader) qsHeader;</span><br><span class="line">        <span class="comment">// 现在你可以调用 SubQsHeader 特有的方法或属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之，你可以将继承了 <code>QsHeader</code> 的类的对象添加到 <code>List&lt;QsHeader&gt;</code> 列表中，但在使用时需要注意类型转换的问题。</p><h1 id="6问：ffmpeg相关：后端处理视频"><a href="#6问：ffmpeg相关：后端处理视频" class="headerlink" title="6问：ffmpeg相关：后端处理视频"></a>6问：ffmpeg相关：后端处理视频</h1><h2 id="如何转码一个前端传来的视频"><a href="#如何转码一个前端传来的视频" class="headerlink" title="如何转码一个前端传来的视频"></a>如何转码一个前端传来的视频</h2><p>如果你希望前端直接上传一个<code>MultipartFile</code>，并在后端进行视频转码和上传到阿里云OSS，可以按照以下步骤进行：</p><h3 id="后端处理上传和转码"><a href="#后端处理上传和转码" class="headerlink" title="后端处理上传和转码"></a>后端处理上传和转码</h3><p>后端使用Spring Boot处理文件上传，并调用FFmpeg进行转码，最后上传到阿里云OSS。</p><h4 id="服务类示例："><a href="#服务类示例：" class="headerlink" title="服务类示例："></a>服务类示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.PutObjectResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardCopyOption;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VideoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OSS ossClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.bucket&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadAndTranscodeVideo</span><span class="params">(MultipartFile file, String ossObjectName)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 保存上传的文件到临时位置</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">tempFile</span> <span class="operator">=</span> Files.createTempFile(<span class="string">&quot;video&quot;</span>, <span class="string">&quot;.mp4&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(tempFile.toFile())) &#123;</span><br><span class="line">            fos.write(file.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转码视频</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">outputFilePath</span> <span class="operator">=</span> Files.createTempFile(<span class="string">&quot;transcoded_&quot;</span>, <span class="string">&quot;.mp4&quot;</span>);</span><br><span class="line">        transcodeVideo(tempFile.toString(), outputFilePath.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上传转码后的视频到OSS</span></span><br><span class="line">        uploadToOSS(outputFilePath.toFile(), ossObjectName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除临时文件</span></span><br><span class="line">        Files.deleteIfExists(tempFile);</span><br><span class="line">        Files.deleteIfExists(outputFilePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">transcodeVideo</span><span class="params">(String inputFilePath, String outputFilePath)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 构建FFmpeg命令</span></span><br><span class="line">        String[] command = &#123;</span><br><span class="line">                <span class="string">&quot;ffmpeg&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-i&quot;</span>, inputFilePath,          <span class="comment">// 输入文件路径</span></span><br><span class="line">                <span class="string">&quot;-c:v&quot;</span>, <span class="string">&quot;libx264&quot;</span>,            <span class="comment">// 视频编码器</span></span><br><span class="line">                <span class="string">&quot;-c:a&quot;</span>, <span class="string">&quot;aac&quot;</span>,                <span class="comment">// 音频编码器</span></span><br><span class="line">                outputFilePath                <span class="comment">// 输出文件路径</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ProcessBuilder</span></span><br><span class="line">        <span class="type">ProcessBuilder</span> <span class="variable">processBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(command);</span><br><span class="line">        processBuilder.redirectErrorStream(<span class="literal">true</span>); <span class="comment">// 将错误流合并到标准输出流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动进程</span></span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> processBuilder.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取进程输出</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待进程完成</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">exitCode</span> <span class="operator">=</span> process.waitFor();</span><br><span class="line">        System.out.println(<span class="string">&quot;FFmpeg process exited with code &quot;</span> + exitCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">uploadToOSS</span><span class="params">(File filePath, String ossObjectName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PutObjectResult</span> <span class="variable">result</span> <span class="operator">=</span> ossClient.putObject(bucketName, ossObjectName, filePath);</span><br><span class="line">            System.out.println(<span class="string">&quot;File uploaded to OSS: &quot;</span> + result.getETag());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8问：什么是心跳包"><a href="#8问：什么是心跳包" class="headerlink" title="8问：什么是心跳包"></a>8问：什么是心跳包</h1><h2 id="心跳包"><a href="#心跳包" class="headerlink" title="心跳包"></a>心跳包</h2><h3 id="1-心跳包格式"><a href="#1-心跳包格式" class="headerlink" title="1. 心跳包格式"></a>1. 心跳包格式</h3><p>心跳包通常是一个简单的请求或消息，包含以下基本信息：</p><ul><li><strong>客户端标识</strong>：唯一标识客户端的ID或token。</li><li><strong>时间戳</strong>：当前时间的时间戳，用于检测延迟和连接状态。</li><li><strong>随机数或序列号</strong>：用于防止重放攻击和确保消息的唯一性。</li></ul><p>示例心跳包格式（JSON）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;clientId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unique_client_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="number">1633072800000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nonce&quot;</span><span class="punctuation">:</span> <span class="number">12345</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-发送频率"><a href="#2-发送频率" class="headerlink" title="2. 发送频率"></a>2. 发送频率</h3><p>心跳包的发送频率需要根据具体的应用场景和网络环境来确定。一般来说，可以考虑以下几种策略：</p><ul><li><strong>固定间隔</strong>：每隔固定的时间间隔发送一次心跳包，例如每30秒或1分钟。</li><li><strong>动态调整</strong>：根据网络状况和服务器负载动态调整心跳包的发送频率，以减少网络开销。</li></ul><h3 id="3-发送方式"><a href="#3-发送方式" class="headerlink" title="3. 发送方式"></a>3. 发送方式</h3><p>心跳包可以通过HTTP请求、WebSocket或其他实时通信协议发送。以下是两种常见的发送方式：</p><ul><li><strong>HTTP请求</strong>：客户端定期发送HTTP请求到服务器，服务器响应确认消息。</li><li><strong>WebSocket</strong>：通过WebSocket连接保持持久连接，客户端定期发送心跳消息，服务器返回确认消息。</li></ul><h3 id="4-处理逻辑"><a href="#4-处理逻辑" class="headerlink" title="4. 处理逻辑"></a>4. 处理逻辑</h3><p>服务器接收到心跳包后需要进行相应的处理，包括：</p><ul><li><strong>验证心跳包</strong>：检查客户端标识、时间戳和随机数等信息的有效性。</li><li><strong>更新状态</strong>：更新客户端的最后活跃时间，记录连接状态。</li><li><strong>响应确认</strong>：返回确认消息，告知客户端心跳包已成功接收。</li></ul><h3 id="5-超时处理"><a href="#5-超时处理" class="headerlink" title="5. 超时处理"></a>5. 超时处理</h3><p>服务器需要设置一个超时时间，如果在超时时间内未收到客户端的心跳包，则认为连接已断开。超时时间应根据心跳包的发送频率来确定，例如，如果心跳包每30秒发送一次，超时时间可以设置为60秒。</p><h3 id="6-重连机制"><a href="#6-重连机制" class="headerlink" title="6. 重连机制"></a>6. 重连机制</h3><p>如果客户端检测到连接断开，需要尝试重新连接。可以采用指数退避算法来避免频繁重连，减少服务器压力。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是一个简单的示例，展示如何在客户端和服务器之间实现心跳机制：</p><h4 id="客户端（JavaScript）"><a href="#客户端（JavaScript）" class="headerlink" title="客户端（JavaScript）"></a>客户端（JavaScript）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendHeartbeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> heartbeat = &#123;</span><br><span class="line">    <span class="attr">clientId</span>: <span class="string">&quot;unique_client_id&quot;</span>,</span><br><span class="line">    <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">    <span class="attr">nonce</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10000</span>)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/api/heartbeat&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(heartbeat)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Heartbeat sent successfully&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to send heartbeat&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error sending heartbeat:&#x27;</span>, error);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(sendHeartbeat, <span class="number">30000</span>); <span class="comment">// 每30秒发送一次心跳包</span></span><br></pre></td></tr></table></figure><h4 id="服务器（Node-js-Express）"><a href="#服务器（Node-js-Express）" class="headerlink" title="服务器（Node.js + Express）"></a>服务器（Node.js + Express）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/heartbeat&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; clientId, timestamp, nonce &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 验证心跳包的有效性</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isValidHeartbeat</span>(clientId, timestamp, nonce)) &#123;</span><br><span class="line">    <span class="comment">// 更新客户端的最后活跃时间</span></span><br><span class="line">    <span class="title function_">updateClientActivity</span>(clientId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回确认消息</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&#x27;Heartbeat received&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid heartbeat&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isValidHeartbeat</span>(<span class="params">clientId, timestamp, nonce</span>) &#123;</span><br><span class="line">  <span class="comment">// 验证逻辑</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateClientActivity</span>(<span class="params">clientId</span>) &#123;</span><br><span class="line">  <span class="comment">// 更新客户端活跃时间</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="服务器（springboot）"><a href="#服务器（springboot）" class="headerlink" title="服务器（springboot）"></a>服务器（springboot）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeartbeatController</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ClientActivityRepository clientActivityRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/heartbeat&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">receiveHeartbeat</span><span class="params">(<span class="meta">@RequestBody</span> HeartbeatRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 验证心跳包的有效性</span></span><br><span class="line">    <span class="keyword">if</span> (isValidHeartbeat(request.getClientId(), request.getTimestamp(), request.getNonce())) &#123;</span><br><span class="line">        <span class="comment">// 更新客户端的最后活跃时间</span></span><br><span class="line">        updateClientActivity(request.getClientId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回确认消息</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;Heartbeat received&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.badRequest().body(<span class="string">&quot;Invalid heartbeat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValidHeartbeat</span><span class="params">(String clientId, <span class="type">long</span> timestamp, <span class="type">int</span> nonce)</span> &#123;</span><br><span class="line">    <span class="comment">// 验证客户端是否存在</span></span><br><span class="line">    <span class="type">ClientActivity</span> <span class="variable">clientActivity</span> <span class="operator">=</span> clientActivityRepository.findById(clientId).orElse(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (clientActivity == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证时间戳是否合理（例如，检查时间戳是否在合理的时间范围内）</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">timeDifference</span> <span class="operator">=</span> currentTime - timestamp;</span><br><span class="line">    <span class="keyword">if</span> (timeDifference &gt; <span class="number">60000</span>) &#123; <span class="comment">// 1分钟</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证nonce是否唯一（简单示例，实际应用中可能需要更复杂的逻辑）</span></span><br><span class="line">    <span class="comment">// 这里假设nonce在10000以内是唯一的</span></span><br><span class="line">    <span class="keyword">if</span> (nonce &lt; <span class="number">0</span> || nonce &gt;= <span class="number">10000</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateClientActivity</span><span class="params">(String clientId)</span> &#123;</span><br><span class="line">    <span class="type">ClientActivity</span> <span class="variable">clientActivity</span> <span class="operator">=</span> clientActivityRepository.findById(clientId).orElse(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (clientActivity == <span class="literal">null</span>) &#123;</span><br><span class="line">        clientActivity = <span class="keyword">new</span> <span class="title class_">ClientActivity</span>();</span><br><span class="line">        clientActivity.setClientId(clientId);</span><br><span class="line">    &#125;</span><br><span class="line">    clientActivity.setLastActiveTime(System.currentTimeMillis());</span><br><span class="line">    clientActivityRepository.save(clientActivity);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>设计心跳包时需要综合考虑心跳包的格式、发送频率、处理逻辑、超时处理和重连机制等因素。通过合理的心跳机制设计，可以有效维护客户端与服务器之间的连接状态，提高系统的稳定性和可靠性。</p><h1 id="9问：git使用查缺补漏"><a href="#9问：git使用查缺补漏" class="headerlink" title="9问：git使用查缺补漏"></a>9问：git使用查缺补漏</h1><h2 id="隐藏更改的用途"><a href="#隐藏更改的用途" class="headerlink" title="隐藏更改的用途"></a>隐藏更改的用途</h2><p>隐藏更改（如使用 <code>git stash</code>）通常在以下几种场景中应用：</p><h3 id="1-临时切换分支"><a href="#1-临时切换分支" class="headerlink" title="1. 临时切换分支"></a>1. <strong>临时切换分支</strong></h3><p>当你在一个特性分支上工作，但需要临时切换到另一个分支进行紧急修复或查看其他代码时，可以使用 <code>git stash</code> 来保存当前的更改，切换分支后再恢复这些更改。</p><h3 id="2-处理合并冲突"><a href="#2-处理合并冲突" class="headerlink" title="2. 处理合并冲突"></a>2. <strong>处理合并冲突</strong></h3><p>在解决合并冲突时，如果你发现需要暂时放弃当前工作以处理其他任务，可以将未完成的修改存储起来，待合并冲突解决后再恢复。</p><h3 id="3-清理工作区"><a href="#3-清理工作区" class="headerlink" title="3. 清理工作区"></a>3. <strong>清理工作区</strong></h3><p>如果你的工作区有很多未提交的更改，但你需要进行测试或查看其他文件，不想提交这些更改，可以选择先隐藏它们。</p><h3 id="4-多任务处理"><a href="#4-多任务处理" class="headerlink" title="4. 多任务处理"></a>4. <strong>多任务处理</strong></h3><p>在进行多个任务时，你可能会同时有多个未完成的更改。使用 <code>git stash</code> 可以帮助你在不同任务之间快速切换，而不需要每次都提交或丢弃你的工作。</p><h3 id="5-试验新代码"><a href="#5-试验新代码" class="headerlink" title="5. 试验新代码"></a>5. <strong>试验新代码</strong></h3><p>如果你想尝试一些实验性的代码修改，但又不想干扰到当前的工作流程，可以将当前的更改隐藏，然后进行实验，最后决定是否恢复这些更改。</p><h3 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h3><h4 id="临时切换分支"><a href="#临时切换分支" class="headerlink" title="临时切换分支"></a>临时切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存当前更改</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行其他操作...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到原分支</span></span><br><span class="line">git checkout feature-branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复之前的更改</span></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>隐藏更改是一种灵活的方式，可以帮助开发者有效管理工作区的状态，特别是在需要频繁切换任务或处理中断时。通过合理使用 <code>git stash</code>，可以提高工作效率，保持代码库的整洁状态。</p><h1 id="10问：node-js到底是什么"><a href="#10问：node-js到底是什么" class="headerlink" title="10问：node.js到底是什么"></a>10问：node.js到底是什么</h1><p>在使用Vue.js进行前端开发时，通常不需要直接下载Node.js。Vue.js是一个前端JavaScript框架，可以直接在浏览器中运行，不需要Node.js环境。然而，对于大多数现代前端项目，尤其是使用Vue CLI创建的项目，Node.js是必需的，原因如下：</p><ol><li><p><strong>包管理</strong>：Node.js提供了一个包管理器npm（Node Package Manager），它允许开发者轻松地安装、更新和管理项目所需的依赖库。Vue CLI使用npm来安装Vue.js及其相关依赖。</p></li><li><p><strong>构建工具</strong>：Vue CLI使用Webpack或Vite等构建工具来打包项目资源，这些工具需要Node.js环境来运行。构建工具可以将Vue组件、JavaScript、CSS和其他资源转换成浏览器可以理解的格式，并进行优化。</p></li><li><p><strong>开发服务器</strong>：Vue CLI提供了一个开发服务器，它可以在本地运行项目，并支持热重载等功能。这个服务器也是基于Node.js构建的。</p></li><li><p><strong>脚本执行</strong>：在<code>package.json</code>文件中，你可以定义一系列的脚本命令，如运行开发服务器、构建生产版本等。这些脚本需要Node.js来执行。</p></li><li><p><strong>插件系统</strong>：Vue CLI支持插件系统，允许开发者扩展项目的功能。这些插件通常也是基于Node.js开发的。</p></li></ol><p>因此，虽然Vue.js本身不需要Node.js，但为了使用Vue CLI、管理依赖、构建项目和运行开发服务器等，你需要安装Node.js。通常，Vue CLI会在初始化项目时检查Node.js的版本，并给出推荐的版本范围。</p><h1 id="11问：vue-cli和create-vue"><a href="#11问：vue-cli和create-vue" class="headerlink" title="11问：vue-cli和create-vue"></a>11问：vue-cli和create-vue</h1><p>Vue CLI 和 Create Vue 都是用于创建 Vue.js 项目的工具，但它们使用的构建工具不同。Vue CLI 默认使用 Webpack 作为构建工具，而 Create Vue 是 Vue 3 的专用脚手架，使用 Vite 作为构建工具。</p><h3 id="Vue-CLI-和-Webpack-的关系"><a href="#Vue-CLI-和-Webpack-的关系" class="headerlink" title="Vue CLI 和 Webpack 的关系"></a>Vue CLI 和 Webpack 的关系</h3><ul><li><strong>Vue CLI</strong>：Vue CLI 是一个基于 Vue.js 的项目脚手架，它默认使用 Webpack 来处理项目的构建任务。Vue CLI 提供了一个命令行界面，允许开发者快速搭建 Vue 项目框架，并集成了项目配置、插件系统、预设等多种功能。</li></ul><h3 id="Create-Vue-和-Vite-的关系"><a href="#Create-Vue-和-Vite-的关系" class="headerlink" title="Create Vue 和 Vite 的关系"></a>Create Vue 和 Vite 的关系</h3><ul><li><strong>Create Vue</strong>：Create Vue 是 Vue 3 的专用脚手架，它使用 Vite 作为构建工具。Vite 是一个基于原生 ES Module 的现代前端构建工具，它利用浏览器原生 ES Module 支持来提供快速的开发体验。</li></ul><p>总的来说，Vue CLI 和 Create Vue 都是为了简化 Vue.js 项目的开发而创建的脚手架工具，只是它们使用的构建工具不同。Vue CLI 使用 Webpack，而 Create Vue 使用 Vite。</p><h1 id="12问：js中的解构赋值是什么"><a href="#12问：js中的解构赋值是什么" class="headerlink" title="12问：js中的解构赋值是什么"></a>12问：js中的解构赋值是什么</h1><p>解构赋值（Destructuring Assignment）是一种在 JavaScript（以及 TypeScript 和其他一些基于 ECMAScript 的语言）中从数组或对象中提取数据，并将这些数据赋值给变量的简洁方法。它可以将复杂的数据结构分解为更简单的部分，使得代码更加清晰和易于理解。</p><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>数组解构允许你从数组中提取值，并将它们赋值给变量。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> [a, b, c] = numbers;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出: 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 输出: 3</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>numbers</code> 数组中的元素被解构并分别赋值给了变量 <code>a</code>、<code>b</code> 和 <code>c</code>。</p><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>对象解构允许你从对象中提取属性，并将它们赋值给变量。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 输出: Alice</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 输出: 25</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>person</code> 对象中的属性 <code>name</code> 和 <code>age</code> 被解构并分别赋值给了变量 <code>name</code> 和 <code>age</code>。</p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>解构赋值时，可以为变量提供默认值，以防在解构过程中对应的值不存在。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name = <span class="string">&#x27;Guest&#x27;</span>, age = <span class="number">30</span> &#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 输出: Guest</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 输出: 30</span></span><br></pre></td></tr></table></figure><p>在这个例子中，由于解构的对象是空的，所以变量 <code>name</code> 和 <code>age</code> 分别被赋予了默认值 <code>&#39;Guest&#39;</code> 和 <code>30</code>。</p><h3 id="嵌套解构"><a href="#嵌套解构" class="headerlink" title="嵌套解构"></a>嵌套解构</h3><p>解构赋值也支持嵌套结构，可以提取嵌套数组或对象中的数据。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">profile</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">      <span class="attr">country</span>: <span class="string">&#x27;USA&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">profile</span>: &#123; name, <span class="attr">address</span>: &#123; city &#125; &#125;</span><br><span class="line">&#125; = user;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 输出: Bob</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(city); <span class="comment">// 输出: New York</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们从 <code>user</code> 对象中解构出了嵌套的 <code>name</code> 和 <code>city</code> 属性。</p><p>解构赋值是一种非常实用的特性，它可以简化代码，提高代码的可读性和可维护性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ai解答 </tag>
            
            <tag> 腾讯元宝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统</title>
      <link href="/2024/11/28/Linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0(1)/"/>
      <url>/2024/11/28/Linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027214128.png" alt="image-20221027214128453"></p><ul><li><code>/</code>，根目录是最顶级的目录了</li><li>Linux只有一个顶级目录：<code>/</code></li><li>路径描述的层次关系同样适用<code>/</code>来表示</li><li>&#x2F;home&#x2F;itheima&#x2F;a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li></ul><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>功能：列出文件夹信息</p><p>语法：<code>ls [-l -h -a] [参数]</code></p><ul><li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li><li>-l，以列表形式查看</li><li>-h，配合-l，以更加人性化的方式显示文件大小</li><li>-a，显示隐藏文件</li></ul><h3 id="隐藏文件、文件夹"><a href="#隐藏文件、文件夹" class="headerlink" title="隐藏文件、文件夹"></a>隐藏文件、文件夹</h3><p>在Linux中以<code>.</code>开头的，均是隐藏的。</p><p>默认不显示出来，需要<code>-a</code>选项才可查看到。</p><h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>功能：展示当前工作目录</p><p>语法：<code>pwd</code></p><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><p>功能：切换工作目录</p><p>语法：<code>cd [目标目录]</code></p><p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p><h2 id="HOME目录"><a href="#HOME目录" class="headerlink" title="HOME目录"></a>HOME目录</h2><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p><ul><li><p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p></li><li><p>root用户的HOME目录，在：<code>/root</code></p></li></ul><p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p><h2 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h2><ul><li><p>相对路径，&#x3D;&#x3D;非&#x3D;&#x3D;<code>/</code>开头的称之为相对路径</p><p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p></li><li><p>绝对路径，&#x3D;&#x3D;以&#x3D;&#x3D;<code>/</code>开头的称之为绝对路径</p><p>绝对路径从<code>根</code>开始描述路径</p></li></ul><h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><ul><li><code>.</code>，表示当前，比如.&#x2F;a.txt，表示当前文件夹内的<code>a.txt</code>文件</li><li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li><li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li></ul><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><p>功能：创建文件夹</p><p>语法：<code>mkdir [-p] 参数</code></p><ul><li>参数：被创建文件夹的路径</li><li>选项：-p，可选，表示创建前置路径</li></ul><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>功能：创建文件</p><p>语法：<code>touch 参数</code></p><ul><li>参数：被创建的文件路径</li></ul><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>功能：查看文件内容</p><p>语法：<code>cat 参数</code></p><ul><li>参数：被查看的文件路径</li></ul><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><p>功能：查看文件，可以支持翻页查看</p><p>语法：<code>more 参数</code></p><ul><li>参数：被查看的文件路径</li><li>在查看过程中：<ul><li><code>空格</code>键翻页</li><li><code>q</code>退出查看</li></ul></li></ul><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>功能：复制文件、文件夹</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>参数1，被复制的</li><li>参数2，要复制去的地方</li><li>选项：-r，可选，复制文件夹使用</li></ul><p>示例：</p><ul><li>cp a.txt b.txt，复制当前目录下a.txt为b.txt</li><li>cp a.txt test&#x2F;，复制当前目录a.txt到test文件夹内</li><li>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</li></ul><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><p>功能：移动文件、文件夹</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数1：被移动的</li><li>参数2：要移动去的地方，参数2如果不存在，则会进行改名</li></ul><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><p>功能：删除文件、文件夹</p><p>语法：<code>rm [-r -f] 参数...参数</code></p><ul><li>参数：支持多个，每一个表示被删除的，空格进行分隔</li><li>选项：-r，删除文件夹使用</li><li>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</li></ul><blockquote><p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p></blockquote><h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><p>功能：查看命令的程序本体文件路径</p><p>语法：<code>which 参数</code></p><ul><li>参数：被查看的命令</li></ul><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>功能：搜索文件</p><p>语法1按文件名搜索：<code>find 路径 -name 参数</code></p><ul><li>路径，搜索的起始路径</li><li>参数，搜索的关键字，支持通配符*， 比如：<code>*</code>test表示搜索任意以test结尾的文件</li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p>功能：过滤关键字</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可以作为管道符的输入</p></blockquote><h2 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h2><p>功能：统计</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可作为管道符的输入</p></blockquote><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h2><p>写法：<code>|</code></p><p>功能：将符号左边的结果，作为符号右边的输入</p><p>示例：</p><p><code>cat a.txt | grep itheima</code>，将cat a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p><p>可以支持嵌套：</p><p><code>cat a.txt | grep itheima | grep itcast</code></p><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>功能：输出内容</p><p>语法：<code>echo 参数</code></p><ul><li>参数：被输出的内容</li></ul><h2 id="反引号"><a href="#反引号" class="headerlink" title="&#96;反引号"></a>&#96;反引号</h2><p>功能：被两个反引号包围的内容，会作为命令执行</p><p>示例：</p><ul><li>echo `pwd`，会输出当前工作目录</li></ul><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>功能：查看文件尾部内容</p><p>语法：<code>tail [-f] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-f，持续跟踪文件修改</li></ul><h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><p>功能：查看文件头部内容</p><p>语法：<code>head [-n] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-n，查看的行数</li></ul><h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><p>功能：将符号左边的结果，输出到右边指定的文件中去</p><ul><li><code>&gt;</code>，表示覆盖输出</li><li><code>&gt;&gt;</code>，表示追加输出</li></ul><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><p>打开文件的方式是</p><p><code>vi</code> 文件路径</p><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215841.png" alt="image-20221027215841573"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215846.png" alt="image-20221027215846581"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215849.png" alt="image-20221027215849668"></p><h3 id="底线命令快捷键"><a href="#底线命令快捷键" class="headerlink" title="底线命令快捷键"></a>底线命令快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215858.png" alt="image-20221027215858967"></p><h2 id="命令的选项"><a href="#命令的选项" class="headerlink" title="命令的选项"></a>命令的选项</h2><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p><p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p><p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p><p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p><h3 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h3><p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220005.png" alt="image-20221027220005610"></p><h3 id="查看命令的详细手册"><a href="#查看命令的详细手册" class="headerlink" title="查看命令的详细手册"></a>查看命令的详细手册</h3><p>可以通过：<code>man 命令</code>查看某命令的详细手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220010.png" alt="image-20221027220009949"></p><h1 id="Linux常用操作"><a href="#Linux常用操作" class="headerlink" title="Linux常用操作"></a>Linux常用操作</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>CentOS系统使用：<ul><li>yum [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li><li>Ubuntu系统使用<ul><li>apt [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li></ul><blockquote><p>yum 和 apt 均需要root权限</p></blockquote><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>功能：控制系统服务的启动关闭等</p><p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p><ul><li>start，启动</li><li>stop，停止</li><li>status，查看状态</li><li>disable，关闭开机自启</li><li>enable，开启开机自启</li><li>restart，重启</li></ul><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>功能：创建文件、文件夹软链接（快捷方式）</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>参数1：被链接的</li><li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li></ul><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li><p>-d 按照给定的字符串显示日期，一般用于日期计算</p></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年%y   年份后两位数字 (00..99)</li><li>%m   月份 (01..12)</li><li>%d   日 (01..31)</li><li>%H   小时 (00..23)</li><li>%M   分钟 (00..59)</li><li>%S   秒 (00..60)</li><li>%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>示例：</p><ul><li><p>按照2022-01-01的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220514.png" alt="image-20221027220514640"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220525.png" alt="image-20221027220525625"></p></li><li><p>-d选项日期计算</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220429.png" alt="image-20221027220429831"></p><ul><li><p>支持的时间标记为：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220449.png" alt="image-20221027220449312"></p></li></ul></li></ul><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>修改时区为中国时区</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220554.png" alt="image-20221027220554654"></p><h2 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h2><p>功能：同步时间</p><p>安装：<code>yum install -y ntp</code></p><p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p><p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p><h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>格式：a.b.c.d</p><ul><li>abcd为0~255的数字</li></ul><p>特殊IP：</p><ul><li>127.0.0.1，表示本机</li><li>0.0.0.0<ul><li>可以表示本机</li><li>也可以表示任意IP（看使用场景）</li></ul></li></ul><p>查看ip：<code>ifconfig</code></p><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><p>功能：Linux系统的名称</p><p>查看：<code>hostname</code></p><p>设置：<code>hostnamectl set-hostname 主机名</code></p><h2 id="配置VMware固定IP"><a href="#配置VMware固定IP" class="headerlink" title="配置VMware固定IP"></a>配置VMware固定IP</h2><ol><li><p>修改VMware网络，参阅PPT，图太多</p></li><li><p>设置Linux内部固定IP</p><p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>示例文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;# 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;# IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;# 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.88.2&quot;# 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.88.2&quot;# DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><p>功能：查看进程信息</p><p>语法：<code>ps -ef</code>，查看全部进程信息，可以搭配grep做过滤：<code>ps -ef | grep xxx</code></p><h2 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221303.png" alt="image-20221027221303037"></p><h2 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221241.png" alt="image-20221027221241123"></p><h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>功能：查看端口占用</p><p>用法：<code>netstat -anp | grep xxx</code></p><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>测试网络是否联通</p><p>语法：<code>ping [-c num] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221129.png" alt="image-20221027221129782"></p><h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221149.png" alt="image-20221027221148964"></p><h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221201.png" alt="image-20221027221201079"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221210.png" alt="image-20221027221210518"></p><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><p>功能：查看主机运行状态</p><p>语法：<code>top</code>，查看基础信息</p><p>可用选项：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221340.png" alt="image-20221027221340729"></p><p>交互式模式中，可用快捷键：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221354.png" alt="image-20221027221354137"></p><h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><p>查看磁盘占用</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221413.png" alt="image-20221027221413787"></p><h2 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h2><p>查看CPU、磁盘的相关信息</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221440.png" alt="image-20221027221439990"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221514.png" alt="image-20221027221514237"></p><h2 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h2><p>查看网络统计</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221545.png" alt="image-20221027221545822"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>临时设置：export 变量名&#x3D;变量值</li><li>永久设置：<ul><li>针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li><li>针对全局，设置<code>/etc/profile</code></li></ul></li></ul><h3 id="PATH变量"><a href="#PATH变量" class="headerlink" title="PATH变量"></a>PATH变量</h3><p>记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><h2 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h2><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><h2 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p><ul><li>-z表示使用gzip，可以不写</li></ul><p><code>zip [-r] 参数1 参数2 参数N</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221906.png" alt="image-20221027221906247"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p><ul><li>-z表示使用gzip，可以省略</li><li>-C，可以省略，指定要解压去的地方，不写解压到当前目录</li></ul><p><code>unzip [-d] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221939.png" alt="image-20221027221939899"></p><h2 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h2><p>切换用户</p><p>语法：<code>su [-] [用户]</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222021.png" alt="image-20221027222021619"></p><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222035.png" alt="image-20221027222035337"></p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itheima ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>在visudo内配置如上内容，可以让itheima用户，无需密码直接使用<code>sudo</code></p><h2 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h2><p>修改文件、文件夹权限</p><p>语法：<code>chmod [-R] 权限 参数</code></p><ul><li><p>权限，要设置的权限，比如755，表示：<code>rwxr-xr-x</code>（管理员-用户组-所有人）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222157.png" alt="image-20221027222157276"></p></li><li><p>参数，被修改的文件、文件夹</p></li><li><p>选项-R，设置文件夹和其内部全部内容一样生效</p></li></ul><p><code>setfacl</code>和<code>chmod</code>都是Linux系统中用于设置文件和目录权限的命令，但它们之间存在一些关键区别：</p><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><ol><li><p><strong>基本功能</strong>：</p><ul><li><code>chmod</code>命令用于改变文件或目录的权限模式。</li><li>它使用一个三位八进制数来表示权限（例如，755）或者使用符号表示法（例如，u+rwx,g+rx,o-r）。</li></ul></li><li><p><strong>作用范围</strong>：</p><ul><li><code>chmod</code>只能改变文件或目录的所有者、所属组和其他用户的权限。</li><li>它不能针对单个用户或用户组设置特定的权限。</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 755 file.txt</span><br><span class="line"><span class="built_in">chmod</span> u+x,g-w,o=r file.txt</span><br></pre></td></tr></table></figure></li></ol><h3 id="setfacl"><a href="#setfacl" class="headerlink" title="setfacl"></a>setfacl</h3><ol><li><p><strong>基本功能</strong>：</p><ul><li><code>setfacl</code>命令用于设置文件或目录的访问控制列表（ACL）。</li><li>ACL允许更细粒度的权限控制，可以为特定用户或用户组设置特定的权限。</li></ul></li><li><p><strong>作用范围</strong>：</p><ul><li><code>setfacl</code>不仅可以改变所有者、所属组和其他用户的权限，还可以为任意用户或用户组设置权限。</li><li>它提供了比<code>chmod</code>更灵活的权限管理方式。</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setfacl -m u:alice:r file.txt</span><br><span class="line">setfacl -m g:developers:rwx /project</span><br></pre></td></tr></table></figure></li></ol><h3 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h3><ol><li><p><strong>权限粒度</strong>：</p><ul><li><code>chmod</code>：只能设置所有者、所属组和其他用户的权限。</li><li><code>setfacl</code>：可以为任意用户或用户组设置特定的权限。</li></ul></li><li><p><strong>权限表示方式</strong>：</p><ul><li><code>chmod</code>：使用三位八进制数或符号表示法。</li><li><code>setfacl</code>：使用<code>-m</code>选项指定用户或用户组及其权限。</li></ul></li><li><p><strong>默认权限继承</strong>：</p><ul><li><code>chmod</code>：权限设置不会自动继承到子文件或子目录。</li><li><code>setfacl</code>：可以设置默认ACL，使得新创建的文件或目录继承父目录的ACL。</li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>如果你只需要基本的权限管理，<code>chmod</code>是一个简单有效的工具。</li><li>如果你需要更细粒度的权限控制，特别是针对特定用户或用户组的权限设置，<code>setfacl</code>是更好的选择。</li></ul><p>希望这些解释能帮助你理解<code>setfacl</code>和<code>chmod</code>之间的区别！</p><h2 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h2><p>修改文件、文件夹所属用户、组</p><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222326.png" alt="image-20221027222326192"></p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222354.png" alt="image-20221027222354498"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222407.png" alt="image-20221027222407618"></p><h2 id="genenv命令"><a href="#genenv命令" class="headerlink" title="genenv命令"></a>genenv命令</h2><ul><li><p><code>getenv group</code>，查看系统全部的用户组</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222446.png" alt="image-20221027222446514"></p></li><li><p><code>getenv passwd</code>，查看系统全部的用户</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222512.png" alt="image-20221027222512274"></p></li></ul><h2 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h2><p>查看系统全部的环境变量</p><p>语法：<code>env</code></p>]]></content>
      
      
      <categories>
          
          <category> 我随便写写，你随便看看 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言的学习与应用（偏后端)</title>
      <link href="/2024/11/28/Go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%BA%94%E7%94%A8%EF%BC%88%E5%81%8F%E5%90%8E%E7%AB%AF)/"/>
      <url>/2024/11/28/Go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%BA%94%E7%94%A8%EF%BC%88%E5%81%8F%E5%90%8E%E7%AB%AF)/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言的学习与应用（偏后端"><a href="#Go语言的学习与应用（偏后端" class="headerlink" title="Go语言的学习与应用（偏后端)"></a>Go语言的学习与应用（偏后端)</h1><h2 id="golang的中文文档网址"><a href="#golang的中文文档网址" class="headerlink" title="golang的中文文档网址"></a>golang的中文文档网址</h2><p><a href="http://studygolang.com/pkgdoc">http://studygolang.com/pkgdoc</a></p><h2 id="go语言的入门"><a href="#go语言的入门" class="headerlink" title="go语言的入门"></a>go语言的入门</h2><h3 id="01-认识它"><a href="#01-认识它" class="headerlink" title="01 认识它"></a>01 认识它</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> build ***.<span class="keyword">go</span><span class="comment">//进行编译，生存程序exe再运行</span></span><br><span class="line"><span class="keyword">go</span> run ***.<span class="keyword">go</span><span class="comment">//直接进行编译运行</span></span><br></pre></td></tr></table></figure><h3 id="02-数据类型"><a href="#02-数据类型" class="headerlink" title="02 数据类型"></a>02 数据类型</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>必须引入main包</li><li>import导入“头文件”</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br></pre></td></tr></table></figure><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><ol><li>注意：变量声明了，就一定要用不然会报错</li><li><u><strong>&#x3D;是赋值，:&#x3D;是声明自动推导变量</strong></u></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span><span class="comment">//没有初始化默认为0</span></span><br><span class="line"><span class="keyword">var</span> a,b <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">d:=<span class="number">30</span><span class="comment">//类型推导，很常用,只能对同一个变量名使用一次</span></span><br><span class="line">d=<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>&#123;</span><br><span class="line">    a <span class="type">int</span></span><br><span class="line">    b <span class="type">float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Println和Printf"><a href="#Println和Printf" class="headerlink" title="Println和Printf"></a>Println和Printf</h5><ol><li><p>Println是换行</p></li><li><p>Printf可以格式化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b:= <span class="number">20</span>,<span class="number">30</span></span><br><span class="line">fmt.Println(<span class="string">&quot;a=&quot;</span>,a,<span class="string">&quot;b=&quot;</span>,b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;a=%d,b=%d&quot;</span>,a,b)</span><br></pre></td></tr></table></figure></li></ol><h5 id="多重赋值"><a href="#多重赋值" class="headerlink" title="多重赋值"></a>多重赋值</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交换两个数值</span></span><br><span class="line">i,j:=<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">i,j=j,i<span class="comment">//是的居然可以这样，所以次序很重要</span></span><br></pre></td></tr></table></figure><h5 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h5><p>丢弃数据不处理，一般配合返回值使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>(a,b,c <span class="type">int</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a,b,c <span class="type">int</span></span><br><span class="line">a,b,c=test()<span class="comment">//a=1,b=2,c=3</span></span><br><span class="line">_,b,_=test()<span class="comment">//三个返回值只想要中间的，就启用匿名变量</span></span><br></pre></td></tr></table></figure><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a <span class="type">int</span>=<span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> b=<span class="number">10</span>;<span class="comment">//都是定义了就不能改变的值，注意常量不能使用:=声明定义，直接=</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>&#123;</span><br><span class="line">        c  =<span class="number">10</span></span><br><span class="line">        d  =<span class="number">3.14</span><span class="comment">//自动推导</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="浮点"><a href="#浮点" class="headerlink" title="浮点"></a>浮点</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">float64</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">float32</span></span><br><span class="line"><span class="comment">//64比32更精度准确</span></span><br></pre></td></tr></table></figure><h5 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">byte</span></span><br><span class="line"><span class="comment">//跟c++不一样，输出用%c但是声明用byte</span></span><br></pre></td></tr></table></figure><h5 id="fmt格式化输出"><a href="#fmt格式化输出" class="headerlink" title="fmt格式化输出"></a>fmt格式化输出</h5><ol><li>其他都和c语言差不多，**%v是万能格式**，写了自动推导输出</li><li>%T，输出的是变量类型</li></ol><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line"><span class="comment">//阻塞等待用户输入</span></span><br><span class="line">fmt.Scan(&amp;a)</span><br><span class="line">fmt.Scanf(<span class="string">&quot;%d&quot;</span>,&amp;a)</span><br></pre></td></tr></table></figure><h5 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> bigint <span class="type">int64</span></span><br><span class="line">bigint a</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span>&#123;</span><br><span class="line">    long <span class="type">int64</span></span><br><span class="line">    char <span class="type">byte</span></span><br><span class="line">&#125;<span class="comment">//一起给他们起别名</span></span><br><span class="line"><span class="keyword">var</span> b long</span><br><span class="line"><span class="keyword">var</span> c char</span><br></pre></td></tr></table></figure><h5 id="range"><a href="#range" class="headerlink" title="range"></a>range</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">str:=<span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="comment">//常规打印每个字符</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(str);i++&#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;str[%d]=%c\n&quot;</span>,i,str[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用range,默认两个返回值一个是序数，一个是数据</span></span><br><span class="line"><span class="keyword">for</span> i,data:=<span class="keyword">range</span> str&#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;str[%d]=%c\n&quot;</span>,i,data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用range，默认返回一个</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="keyword">range</span> str&#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;str[%d]=%c\n&quot;</span>,i,str[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//range，用匿名丢弃</span></span><br><span class="line"><span class="keyword">for</span> i,_:=<span class="keyword">range</span> str&#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;str[%d]=%c\n&quot;</span>,i,str[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="03函数"><a href="#03函数" class="headerlink" title="03函数"></a>03函数</h3><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参函数无return</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Myfunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hhhh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参无返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Myfunc01</span><span class="params">(a,b <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    a=<span class="number">111</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不定 指定类型 的个数,...type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Myfunc02</span><span class="params">(args ...<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(args);i++&#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;args[%d]=%d\n&quot;</span>,i,args[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Myfunc02(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    Myfunc02(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无参有返回,推荐写法1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Myfunc03</span><span class="params">()</span></span>(res <span class="type">int</span>)&#123;</span><br><span class="line">    res=<span class="number">55</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无参有返回,推荐写法2</span></span><br><span class="line"><span class="comment">/*func Myfunc03()(res int)&#123;</span></span><br><span class="line"><span class="comment">    return 55</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//多个返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Myfunc03</span><span class="params">()</span></span>(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多个返回值,推荐写法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Myfunc03</span><span class="params">()</span></span>(a <span class="type">int</span>,b <span class="type">int</span>,c <span class="type">int</span>)&#123;</span><br><span class="line">    a,b,c=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数类型-多态性"><a href="#函数类型-多态性" class="headerlink" title="函数类型(多态性)"></a>函数类型(多态性)</h5><p>函数也是可以当做类型赋值，甚至还有多态性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a,b <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Minus</span><span class="params">(a,b <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> FuncType <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res <span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> functest FuncType</span><br><span class="line">    functest=Add</span><br><span class="line">    res=functest(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//3</span></span><br><span class="line">    </span><br><span class="line">    funtest=Minus</span><br><span class="line">    res=functest(<span class="number">10</span>,<span class="number">7</span>)<span class="comment">//3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> FuncType <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span> <span class="type">int</span><span class="comment">//用到函数类型时一定有的东西</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a,b <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Minus</span><span class="params">(a,b <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Calc</span><span class="params">(a,b <span class="type">int</span>,fTest FuncType)</span></span>(res <span class="type">int</span>)&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;回调函数&quot;</span>)</span><br><span class="line">    res=fTest(a,b)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res <span class="type">int</span></span><br><span class="line">    res=Calc(<span class="number">1</span>,<span class="number">2</span>,Add)</span><br><span class="line">    res=Calc(<span class="number">4</span>,<span class="number">3</span>,Minus)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">f1:=<span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;哈哈哈哈哈&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">type</span> FuncType <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f2 FuncType</span><br><span class="line">f2=f1</span><br><span class="line">f2()</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名有参函数必须有定义返回值</span></span><br><span class="line">x,y:=<span class="function"><span class="keyword">func</span><span class="params">(a,b <span class="type">int</span>)</span></span>(max,min <span class="type">int</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> a&lt;b&#123;</span><br><span class="line">        max=b</span><br><span class="line">        min=a</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        max=a</span><br><span class="line">        min=b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;(<span class="number">10</span>,<span class="number">20</span>)<span class="comment">//匿名函数后面写括号传入形参</span></span><br><span class="line"><span class="comment">//x=20,y=10</span></span><br></pre></td></tr></table></figure><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><p>我觉得这一点跟C有区别一点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="type">int</span>=<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span>&#123;</span><br><span class="line">        <span class="comment">//这个&#123;&#125;是一个独立空间x在这里还没有历经内存释放，所以x每一轮的变动都有保存</span></span><br><span class="line">        x++</span><br><span class="line">        <span class="keyword">return</span> x*x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    f:=Test()</span><br><span class="line">    fmt.Println(f())<span class="comment">//1</span></span><br><span class="line">    fmt.Println(f())<span class="comment">//4</span></span><br><span class="line">    fmt.Println(f())<span class="comment">//9</span></span><br><span class="line">    fmt.Println(f())<span class="comment">//16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h5><p>延迟调用，只用在大括号里</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;hhhhh&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;jjjjj&quot;</span>)</span><br><span class="line"><span class="comment">//jjjjj</span></span><br><span class="line"><span class="comment">//hhhhh</span></span><br><span class="line"><span class="comment">//因为第一行被defer延迟调用了</span></span><br></pre></td></tr></table></figure><p>多个defer的调用顺序：和栈一样：先写的后调用，后写的先调用</p><p>注意：</p><ol><li><strong>如果defer的语句有错误，依旧能继续调用下方的代码</strong></li><li><strong>有defer关键词的正常代码会按照栈的顺序执行</strong></li><li><strong>有defer关键词的错误代码会在正常defer语句执行</strong></li></ol><h5 id="defer和匿名函数"><a href="#defer和匿名函数" class="headerlink" title="defer和匿名函数"></a>defer和匿名函数</h5><p>如果有传参的话，是按顺序该传就传，只不过被传参的函数是defer延时调用的</p><h5 id="获取命令行参数-os-Args"><a href="#获取命令行参数-os-Args" class="headerlink" title="获取命令行参数(os.Args)"></a>获取命令行参数(os.Args)</h5><ol><li>os.Args是用户输入的以空格相隔的字符串切片（string[]）</li><li>使用方式：cmd，终端<ol><li><strong>第一种：go build生成可运行.exe,再运行.exe输入以空格为间隔的多个字符串，注意输入的第一个字符在切片中的下标为1，（因为下标为0的是该.exe的名字）</strong></li><li><strong>第二种：go run直接接空格输入字符串组，同样输入的第一个字符串下标为1</strong></li></ol></li></ol><h4 id="工程管理"><a href="#工程管理" class="headerlink" title="工程管理"></a>工程管理</h4><ol><li>建一个工程，将源码放入src文件管理</li><li>同级目录引入的包应该相同package main，且调用同级不同文件的函数可以直接调用</li><li>不同级目录调用函数<ol><li>引入包名import</li><li>调用：包名.函数名</li><li><strong>函数一定是大写字母开头不然调用不了</strong></li></ol></li></ol><h3 id="04复杂类型"><a href="#04复杂类型" class="headerlink" title="04复杂类型"></a>04复杂类型</h3><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p>注意：数组做函数参数是值传递（值拷贝）：即函数内部改变数组元素不会影响原来的数组</p><p>所以如果想要用函数改变数组元素要用数组指针，地址传递</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(a [7]<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    a[<span class="number">2</span>]=<span class="number">999</span><span class="comment">//外部不会发生改变</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(p *[7]<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    (*p)[<span class="number">2</span>]=<span class="number">999</span><span class="comment">//外部会发生改变</span></span><br><span class="line">&#125;</span><br><span class="line">a:=[<span class="number">7</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">f(a)<span class="comment">//[1,2,0,0,0,0,0]</span></span><br><span class="line">f1(&amp;a)<span class="comment">//[1,999,0,0,0,0,0]</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">50</span>]<span class="type">int</span><span class="comment">//元素个数必须是常量</span></span><br><span class="line">b:=[<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;<span class="comment">//简洁初始化</span></span><br><span class="line"><span class="comment">//[1,2,3,0,0]</span></span><br></pre></td></tr></table></figure><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>本质上不是数组</p><p>长度可以不固定</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="comment">//自动推导</span></span><br><span class="line">a:=[]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;<span class="comment">//切片，只要不固定长度</span></span><br><span class="line"><span class="comment">//借助make函数</span></span><br><span class="line"><span class="comment">//make(类型,len,cap).不指定容量：默认cap=len</span></span><br><span class="line">s:=<span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">5</span>,<span class="number">10</span>)<span class="comment">//len=5,cap=10</span></span><br><span class="line">s:=<span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">5</span>)<span class="comment">//len=5,cap=5</span></span><br></pre></td></tr></table></figure><h6 id="切片与底层数组"><a href="#切片与底层数组" class="headerlink" title="切片与底层数组"></a>切片与底层数组</h6><ol><li>切片截取的片段元素改动，那么被截取的原数组（切片）也会改变</li><li>另外在上述切片上再定义一个新切片，也是建立在原数组的基础上的：即取值范围可以超过上述切片，不要超过原数组就行</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a:=[]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;<span class="comment">//切片，只要不固定长度</span></span><br><span class="line">slice:=a[<span class="number">0</span>:<span class="number">4</span>]<span class="comment">//low,high,max可省略</span></span><br><span class="line">slice[<span class="number">0</span>]=<span class="number">100</span><span class="comment">//slice:[100,2,3,4],a:[100,2,3,4,5,6,7,8]</span></span><br><span class="line"></span><br><span class="line">newslice:=slice[<span class="number">2</span>:<span class="number">7</span>]<span class="comment">//[3,4,5,6,7]</span></span><br><span class="line">newslice[<span class="number">2</span>]=<span class="number">1000</span><span class="comment">//[3,4,1000,5,6,7],a:[100,2,3,4,1000,5,6,7]</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a:=[]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;<span class="comment">//切片，只要不固定长度</span></span><br><span class="line">slice:=a[<span class="number">0</span>:<span class="number">4</span>:<span class="number">5</span>]<span class="comment">//low,high,max</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">左闭右开</span></span><br><span class="line"><span class="comment">len=high-low</span></span><br><span class="line"><span class="comment">cap=max-low</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//slice：[1,2,3,4],len=4,cap=5</span></span><br></pre></td></tr></table></figure><p>append()的扩容速度：在超过原来的通量后以2倍的速度扩容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slice=<span class="built_in">append</span>(slice,<span class="number">100</span>)<span class="comment">//在切片末位加一个成员</span></span><br></pre></td></tr></table></figure><h6 id="切片做函数参数"><a href="#切片做函数参数" class="headerlink" title="切片做函数参数"></a>切片做函数参数</h6><p>和之前讲过的数组不一样，（感觉更接近于C中的数组，不用特意用地址传递，也能在函数内部影响外部）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">(s []<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    s[<span class="number">0</span>]=<span class="number">222</span></span><br><span class="line">&#125;</span><br><span class="line">s:=[]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">Test(s)<span class="comment">//s:[222,2,3,4]</span></span><br><span class="line"><span class="comment">//函数内部影响外部</span></span><br></pre></td></tr></table></figure><h5 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//随机数种子，要以当前系统时间作为种子保证随机数不一样</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">rand.Intn(<span class="number">100</span>)<span class="comment">//100以内的随机数</span></span><br></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>只有len没有cap,也可以说len即cap，也是随着创建会自动扩容的</p><p>键值是唯一的</p><p>map是无序的，与创建顺序无关</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span></span><br><span class="line"><span class="comment">//可以用make创建,可以指定长度</span></span><br><span class="line">m2:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">m3:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断map的key值是否存在</span></span><br><span class="line"><span class="comment">//默认的第一个是key对应的value，第二个是key是否存在</span></span><br><span class="line">value,ok:=m2[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> ok==<span class="literal">true</span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;m2[1]=&quot;</span>,value)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;key不存在&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">delete</span>(m,<span class="number">1</span>)<span class="comment">//map名，key值</span></span><br></pre></td></tr></table></figure><h6 id="map做函数参数"><a href="#map做函数参数" class="headerlink" title="map做函数参数"></a>map做函数参数</h6><p>也是和切片一样是引用传递：即内部影响外部</p><h3 id="05结构体"><a href="#05结构体" class="headerlink" title="05结构体"></a>05结构体</h3><h5 id="创建结构体"><a href="#创建结构体" class="headerlink" title="创建结构体"></a>创建结构体</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span>&#123;</span><br><span class="line">    num <span class="type">int</span></span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    sex <span class="type">byte</span></span><br><span class="line">    age <span class="type">int</span> </span><br><span class="line">    addr <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果每一个属性都要写，就顺序创建</span></span><br><span class="line">    <span class="keyword">var</span> s Student=Student&#123;<span class="number">1</span>,<span class="string">&quot;czy&quot;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="number">20</span>,<span class="string">&quot;翻斗花园&quot;</span>&#125;</span><br><span class="line">    <span class="comment">//指定初始化</span></span><br><span class="line">    s1:= Student&#123;name:<span class="string">&quot;orange&quot;</span>,addr:<span class="string">&quot;化成花园&quot;</span>&#125;<span class="comment">//其余无论类型赋值自动为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="new和结构体指针"><a href="#new和结构体指针" class="headerlink" title="new和结构体指针"></a>new和结构体指针</h5><p>跟C差不多，不过没有-&gt;符号（怪难受的）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span>&#123;</span><br><span class="line">    num <span class="type">int</span></span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    sex <span class="type">byte</span></span><br><span class="line">    age <span class="type">int</span> </span><br><span class="line">    addr <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 *Student<span class="comment">//甚至可以不写这一步</span></span><br><span class="line">p1=<span class="built_in">new</span>(Student)</span><br><span class="line">p1.num=<span class="number">1</span>;</span><br><span class="line">p1.name=<span class="string">&quot;mingming&quot;</span></span><br><span class="line"><span class="comment">//现在是指针操作，把-&gt;简化为.操作了</span></span><br><span class="line">(*p1).name=<span class="string">&quot;czy&quot;</span><span class="comment">//等同于p1.name</span></span><br><span class="line"><span class="comment">//输出p1:是&amp;&#123;...&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">var</span> s Student</span><br><span class="line"><span class="keyword">var</span> p2 *Student</span><br><span class="line">p2:=&amp;s</span><br><span class="line">p2.name=<span class="string">&quot;guangguang&quot;</span></span><br></pre></td></tr></table></figure><p>如果想在不同的包里使用结构，并且创建其属性，那么在创建结构体的时候一定要<strong>首字母大写</strong></p><h3 id="06方法"><a href="#06方法" class="headerlink" title="06方法"></a>06方法</h3><p>带接收者的函数叫方法</p><p>但接收者类型本身不能是pointer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span></span>Setinfo(n <span class="type">string</span>,s <span class="type">byte</span>,a <span class="type">int</span>)&#123;</span><br><span class="line">    p.name=n;</span><br><span class="line">    p.sex=s;</span><br><span class="line">    p.a=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该方法跟着Person是能够被别的结构体继承过去的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p Person</span><br><span class="line">    (&amp;p).Setinfo(<span class="string">&quot;czy&quot;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="number">20</span>)<span class="comment">//***</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="07接口"><a href="#07接口" class="headerlink" title="07接口"></a>07接口</h3><ol><li>知道怎么写就好啦,只有方法声明，<strong>没有实现也没有数据字段</strong></li><li>习惯使用”er”结尾来命名接口</li><li>有点涉及到Java的向上转型，多态性</li><li><strong>继承接口的结构体都是直接把接口写在属性列表里</strong></li><li><strong>上述结构体只能进行向上转型</strong></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Humaner <span class="keyword">interface</span>&#123;</span><br><span class="line">    SayHi()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span>&#123;</span><br><span class="line">    Humaner<span class="comment">//就像写SayHi()一样</span></span><br><span class="line">    Sing(lyrics <span class="type">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现Human的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Human)</span></span>SayHi()&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Human)</span></span>Sing(lyrics <span class="type">string</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h5><p>弹幕：“类似于Java中的Object类”，我觉得有道理</p><h3 id="异常处理（我终于搞懂了）"><a href="#异常处理（我终于搞懂了）" class="headerlink" title="异常处理（我终于搞懂了）"></a>异常处理（我终于搞懂了）</h3><h5 id="error接口的应用"><a href="#error接口的应用" class="headerlink" title="error接口的应用"></a>error接口的应用</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyDiv</span><span class="params">(a, b <span class="type">int</span>)</span></span>(res <span class="type">int</span>,err <span class="type">error</span>)&#123;</span><br><span class="line">    err=<span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> b==<span class="number">0</span>&#123;</span><br><span class="line">        err=errors.New(<span class="string">&quot;分母不能为0&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res=a/b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    res,err:=MyDiv(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span>(err!=<span class="literal">nil</span>)&#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;err=&quot;</span>,err)<span class="comment">//***</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;res=&quot;</span>,res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="panic函数（崩程序"><a href="#panic函数（崩程序" class="headerlink" title="panic函数（崩程序"></a>panic函数（崩程序</h5><h5 id="显式调用panic函数"><a href="#显式调用panic函数" class="headerlink" title="显式调用panic函数"></a>显式调用panic函数</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;this is a panic test&quot;</span>)<span class="comment">//会使得程序中断</span></span><br></pre></td></tr></table></figure><h5 id="数组越界导致panic"><a href="#数组越界导致panic" class="headerlink" title="数组越界导致panic"></a>数组越界导致panic</h5><p>反正就是数组如果写了越界了，panic函数自己就跳出来报错中断程序了</p><h3 id="recover（解决程序崩"><a href="#recover（解决程序崩" class="headerlink" title="recover（解决程序崩"></a>recover（解决程序崩</h3><p>解决panic中断程序，必须和defer一起使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span> <span class="params">(x <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//不让程序崩</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">recover</span>()</span><br><span class="line">        <span class="keyword">if</span> err:=<span class="built_in">recover</span>();err!=<span class="literal">nil</span>&#123;</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()<span class="comment">//该括号调用匿名函数</span></span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line">    a[x]=<span class="number">10</span>;<span class="comment">//x大于9的时候数组越界产生一个panic，程序崩溃</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08文本文件的处理"><a href="#08文本文件的处理" class="headerlink" title="08文本文件的处理"></a>08文本文件的处理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strconv&quot;</span></span><br></pre></td></tr></table></figure><h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h4><p>Contains是否包含字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(s,substr <span class="type">string</span>)</span></span> <span class="type">bool</span></span><br></pre></td></tr></table></figure><p>Join连接字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings.Join(s,<span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure><p>Index查找位置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(s,sep <span class="type">string</span>)</span></span> <span class="type">int</span><span class="comment">//找不到返回-1</span></span><br></pre></td></tr></table></figure><h4 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h4><p>Append系列是各种类型追加到字符串（有需要查看文档吧）</p><p>Format系列都是把别的类型转为字符串（有需要查看文档吧）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str:=strconv.Itoa(<span class="number">6666</span>)<span class="comment">//整型转字符串</span></span><br></pre></td></tr></table></figure><p>·字符串转其他类型：Parase系列</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flag,err:=strconv.ParaseBool(<span class="string">&quot;true&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;<span class="comment">//判断很重要</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;err=&quot;</span>,err)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;flag=&quot;</span>,flag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串转整型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a,_:=strconv.Atoi(<span class="string">&quot;567&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 我随便写写，你随便看看 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blender学习</title>
      <link href="/2024/11/28/blender%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/11/28/blender%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="blender学习"><a href="#blender学习" class="headerlink" title="blender学习"></a>blender学习</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>shift+滚轮&#x3D;&#x3D;&gt;平移</p><p>shift+A&#x3D;&#x3D;&gt;添加物体</p><p>shift+C&#x3D;&#x3D;&gt;游标迅速回到世界中心，</p><p>游标在哪里，东西就添加到哪里（听起来是一个很好用的工具哦</p><p>shift+鼠标右键&#x3D;&#x3D;&gt;游标的选择</p><p>视图切换</p><p>tab键上面的~号键</p><h2 id="倒角"><a href="#倒角" class="headerlink" title="倒角"></a>倒角</h2><p>段数是平滑度</p><p><strong>数量</strong>就会改变大幅度的形状了，按下shift会有更精细化的调整</p><p>如果觉得拉伸后很奇怪，要ctrl+A对所选对象进行一个缩放的应用</p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>r+x+90</p><p>沿着x轴旋转90°的意思</p><h2 id="隔离模式"><a href="#隔离模式" class="headerlink" title="隔离模式"></a>隔离模式</h2><p>&#x2F;键，单独对某一个模型进行操作</p><h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><p>快捷键：点 边 面</p><p>对应：1，2，3</p><p>tab切换选中物体的编辑模式</p><p>ctrl+b进行选中边的倒角，鼠标滑轮进行段数增减</p><p>i键&#x3D;&#x3D;&gt;面内缩</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240727185810535.png" alt="image-20240727185810535"></p><p>e键&#x3D;&#x3D;&gt;面挤出</p><p>alt选中循环边</p><p>m键合并&#x3D;&#x3D;&gt;按距离合并顶点</p><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p>s+shift+z,锁定z轴缩放其他</p><h2 id="几何原点"><a href="#几何原点" class="headerlink" title="几何原点"></a>几何原点</h2><p>右键&#x3D;&#x3D;&gt;设置原点</p><h2 id="收藏夹"><a href="#收藏夹" class="headerlink" title="收藏夹"></a>收藏夹</h2><p>快捷键q</p><h2 id="表面细分"><a href="#表面细分" class="headerlink" title="表面细分"></a>表面细分</h2><p>ctrl+1\2\3</p>]]></content>
      
      
      <categories>
          
          <category> 我随便写写，你随便看看 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blender </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java乱七八糟的学习</title>
      <link href="/2024/11/28/%E4%B8%80%E5%8D%8A%E7%9A%84Java/"/>
      <url>/2024/11/28/%E4%B8%80%E5%8D%8A%E7%9A%84Java/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240918212230787.png" alt="image-20240918212230787"></p><p>因为是kv存储在内存里，所以，查询速度会比mysql快很多</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240918212538330.png" alt="image-20240918212538330"></p><h1 id="Java回炉重造"><a href="#Java回炉重造" class="headerlink" title="Java回炉重造"></a>Java回炉重造</h1><h2 id="增强循环"><a href="#增强循环" class="headerlink" title="增强循环"></a>增强循环</h2><p>在 Java 中，增强的 <code>for</code> 循环（即 <code>for (String str : split)</code>）只是对数组中每个元素的副本进行操作，不会改变原始数组 <code>split</code> 的内容。如果你需要修改数组中的元素，你应该使用传统的 <code>for</code> 循环来进行操作，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">    split[i] = Integer.toBinaryString(Integer.parseInt(split[i]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样可以直接修改 <code>split</code> 数组中的每个元素。</p><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909104205648.png" alt="image-20240909104205648"></p><p> <img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909104305627.png" alt="image-20240909104305627"></p><h3 id="关于数组的内存"><a href="#关于数组的内存" class="headerlink" title="关于数组的内存"></a>关于数组的内存</h3><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909104510727.png" alt="image-20240909104510727"></p><h3 id="关于方法的内存"><a href="#关于方法的内存" class="headerlink" title="关于方法的内存"></a>关于方法的内存</h3><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909104941704.png" alt="image-20240909104941704"></p><h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909105041091.png" alt="image-20240909105041091"></p><p><strong>这个是方法的值传递</strong>，形参在方法中的改变不会影响数组的值。</p><h4 id="引用类型传递"><a href="#引用类型传递" class="headerlink" title="引用类型传递"></a>引用类型传递</h4><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909105257963.png" alt="image-20240909105257963"></p><p><strong>引用类型直接到堆中改变的值</strong>，所以是可以影响到本来数组的值的。</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909111005953.png"></p><p>注意看注释，其实还蛮有用的（对于计算机网络来说</p><p>new String(b, 0, len) 是创建一个新的字符串对象的语法，其中 b 是一个字节数组，0 是起始索引，len 是有效字节的个数。</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909111301569.png" alt="image-20240909111301569"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909111315439.png" alt="image-20240909111315439"></p><p><strong>所以再创建新的字符串的时候，最好用直接赋值的方式创建。</strong></p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909112238899.png" alt="image-20240909112238899"></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909113331903.png" alt="image-20240909113331903"></p><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909130348347.png" alt="image-20240909130348347"></p><p>那个max记得，以后可能有很大用处</p><h1 id="BigIntager"><a href="#BigIntager" class="headerlink" title="BigIntager"></a>BigIntager</h1><p>略，反正可以放很大的值</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909133214608.png"></p><p>值得注意的是，一个[]只能匹配一个字符（<strong>除非后面加了量词</strong>）也就是如果要验证“ab”，需要如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZhengZe</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> CreateString();</span><br><span class="line">        <span class="comment">//正则表达式</span></span><br><span class="line">        System.out.println(str.matches(<span class="string">&quot;[abc][abc]&quot;</span>));</span><br><span class="line">        System.out.println(str.matches(<span class="string">&quot;\\w&#123;4,&#125;&quot;</span>));</span><br><span class="line">        System.out.println(str.matches(<span class="string">&quot;[abc]&#123;2,&#125;\\W+&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">CreateString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//还记得键盘录入怎么写吗？</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入录入:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909134458101.png" alt="image-20240909134458101"></p><p>substring包头不包尾</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="整型数组并将其转换为列表"><a href="#整型数组并将其转换为列表" class="headerlink" title="整型数组并将其转换为列表"></a>整型数组并将其转换为列表</h2><p>在Java中，你可以使用多种方式创建整型数组并将其转换为列表（List）。以下是一些常见的方法：</p><p>在Java 8中，<code>.boxed()</code> 是 <code>Stream</code> API 中的一个方法，用于将基本数据类型的流（如 <code>IntStream</code>、<code>LongStream</code>、<code>DoubleStream</code>）转换为对应的包装类型的流（如 <code>Stream&lt;Integer&gt;</code>、<code>Stream&lt;Long&gt;</code>、<code>Stream&lt;Double&gt;</code>）。</p><h3 id="为什么需要-boxed"><a href="#为什么需要-boxed" class="headerlink" title="为什么需要 .boxed()"></a>为什么需要 <code>.boxed()</code></h3><p>Java的集合框架（如 <code>List</code>、<code>Set</code> 等）只能存储对象，不能直接存储基本数据类型（如 <code>int</code>、<code>long</code>、<code>double</code>）。因此，当你想将基本数据类型的流转换为集合时，需要先将基本数据类型装箱（box）为对应的包装类型。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设你有一个 <code>int[]</code> 数组，你想将其转换为一个 <code>List&lt;Integer&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxedExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数组转换为流</span></span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">intStream</span> <span class="operator">=</span> Arrays.stream(array);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 .boxed() 将 IntStream 转换为 Stream&lt;Integer&gt;</span></span><br><span class="line">        Stream&lt;Integer&gt; integerStream = intStream.boxed();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 Stream&lt;Integer&gt; 收集为 List&lt;Integer&gt;</span></span><br><span class="line">        List&lt;Integer&gt; list = integerStream.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印列表</span></span><br><span class="line">        System.out.println(list); <span class="comment">// 输出: [1, 2, 3, 4, 5]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>Arrays.stream(array)</code> 创建了一个 <code>IntStream</code>，然后调用 <code>.boxed()</code> 方法将其转换为 <code>Stream&lt;Integer&gt;</code>，最后使用 <code>collect(Collectors.toList())</code> 将流收集为一个 <code>List&lt;Integer&gt;</code>。</p><h3 id="简化写法"><a href="#简化写法" class="headerlink" title="简化写法"></a>简化写法</h3><p>通常情况下，你可以将上述步骤简化为一行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.stream(array)</span><br><span class="line">                            .boxed()</span><br><span class="line">                            .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>这样，<code>.boxed()</code> 方法会自动将 <code>IntStream</code> 转换为 <code>Stream&lt;Integer&gt;</code>，使得后续的收集操作可以顺利进行。</p><p>总之，<code>.boxed()</code> 方法用于将基本数据类型的流转换为对应的包装类型的流，以便在需要对象的地方使用。</p><h3 id="方法一：使用Arrays-asList-方法"><a href="#方法一：使用Arrays-asList-方法" class="headerlink" title="方法一：使用Arrays.asList()方法"></a>方法一：使用Arrays.asList()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayToListExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建整型数组</span></span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数组转换为列表</span></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.stream(array)</span><br><span class="line">                                  .boxed()</span><br><span class="line">                                  .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印列表</span></span><br><span class="line">        System.out.println(list); <span class="comment">// 输出: [1, 2, 3, 4, 5]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：使用ArrayList构造函数"><a href="#方法二：使用ArrayList构造函数" class="headerlink" title="方法二：使用ArrayList构造函数"></a>方法二：使用ArrayList构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayToListExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建整型数组</span></span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数组转换为列表</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> value : array) &#123;</span><br><span class="line">            list.add(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印列表</span></span><br><span class="line">        System.out.println(list); <span class="comment">// 输出: [1, 2, 3, 4, 5]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三：使用IntStream和Collectors-toList"><a href="#方法三：使用IntStream和Collectors-toList" class="headerlink" title="方法三：使用IntStream和Collectors.toList()"></a>方法三：使用IntStream和Collectors.toList()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayToListExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建整型数组</span></span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数组转换为列表</span></span><br><span class="line">        List&lt;Integer&gt; list = IntStream.of(array)</span><br><span class="line">                                      .boxed()</span><br><span class="line">                                      .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印列表</span></span><br><span class="line">        System.out.println(list); <span class="comment">// 输出: [1, 2, 3, 4, 5]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法四：使用Collections-addAll-方法"><a href="#方法四：使用Collections-addAll-方法" class="headerlink" title="方法四：使用Collections.addAll()方法"></a>方法四：使用Collections.addAll()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayToListExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建整型数组</span></span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建列表并添加数组元素</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, array);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印列表</span></span><br><span class="line">        System.out.println(list); <span class="comment">// 输出: [1, 2, 3, 4, 5]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>在方法一和方法三中，我们使用了Java 8引入的<strong>Stream</strong> API来处理数组和列表之间的转换。</li><li>在方法二和方法四中，我们使用了传统的循环和添加元素的方式来构建列表。</li><li>在所有方法中，我们都使用了<code>Integer</code>对象而不是基本数据类型<code>int</code>，因为Java的集合框架不支持基本数据类型，只支持对象（所有用了流中的.boxed包装类）。</li></ul><p>选择哪种方法取决于你的具体需求和偏好。</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909141051511.png" alt="image-20240909141051511"></p><h1 id="流stream"><a href="#流stream" class="headerlink" title="流stream"></a>流stream</h1><p>在Java中，<code>List</code> 是一种常见的集合类型，用于存储一组有序的元素。Java 8引入了流（Stream）API，使得对集合的操作更加简洁和功能强大。流支持链式编程，允许你以声明式的方式对集合进行各种操作。</p><h3 id="流的基本概念"><a href="#流的基本概念" class="headerlink" title="流的基本概念"></a>流的基本概念</h3><p>流是一个来自数据源的元素队列，并支持聚合操作。流的操作分为两种类型：</p><ol><li><strong>中间操作</strong>：返回一个新的流，允许链式调用其他操作。</li><li><strong>终端操作</strong>：触发流的处理并产生结果或副作用。</li></ol><h3 id="链式编程示例"><a href="#链式编程示例" class="headerlink" title="链式编程示例"></a>链式编程示例</h3><p>假设我们有一个 <code>List&lt;Integer&gt;</code>，我们想对其进行一系列操作，例如过滤出偶数、将它们平方，然后计算总和。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sumOfSquaresOfEvens</span> <span class="operator">=</span> numbers.stream() <span class="comment">// 创建流</span></span><br><span class="line">                                        .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">// 过滤出偶数</span></span><br><span class="line">                                        .map(n -&gt; n * n) <span class="comment">// 将每个偶数平方</span></span><br><span class="line">                                        .reduce(<span class="number">0</span>, Integer::sum); <span class="comment">// 计算总和</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Sum of squares of evens: &quot;</span> + sumOfSquaresOfEvens); <span class="comment">// 输出: Sum of squares of evens: 220</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体操作解释"><a href="#具体操作解释" class="headerlink" title="具体操作解释"></a>具体操作解释</h3><ol><li><p><strong>创建流</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers.stream()</span><br></pre></td></tr></table></figure><p>这行代码从 <code>List&lt;Integer&gt;</code> 创建了一个流。</p></li><li><p><strong>过滤出偶数</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这行代码使用 <code>filter</code> 方法过滤出流中的偶数。<code>filter</code> 是一个中间操作，返回一个新的流。</p></li><li><p><strong>将每个偶数平方</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.map(n -&gt; n * n)</span><br></pre></td></tr></table></figure><p>这行代码使用 <code>map</code> 方法将流中的每个元素平方。<code>map</code> 也是一个中间操作，返回一个新的流。</p></li><li><p><strong>计算总和</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.reduce(<span class="number">0</span>, Integer::sum)</span><br></pre></td></tr></table></figure><p>这行代码使用 <code>reduce</code> 方法计算流中所有元素的总和。<code>reduce</code> 是一个终端操作，触发流的处理并产生结果。</p></li></ol><h3 id="其他常用流操作"><a href="#其他常用流操作" class="headerlink" title="其他常用流操作"></a>其他常用流操作</h3><ul><li><p>**<code>forEach</code>**：对流中的每个元素执行某个操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers.stream().forEach(System.out::println);</span><br></pre></td></tr></table></figure></li><li><p>**<code>collect</code>**：将流中的元素收集到一个集合中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; evens = numbers.stream().filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li><li><p>**<code>sorted</code>**：对流中的元素进行排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; sortedNumbers = numbers.stream().sorted().collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li><li><p>**<code>distinct</code>**：去除流中的重复元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; distinctNumbers = numbers.stream().distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>流API和链式编程使得对集合的操作更加简洁和功能强大。通过组合不同的中间操作和终端操作，你可以以声明式的方式对集合进行复杂的处理。这种编程方式不仅提高了代码的可读性，还减少了样板代码的编写。</p><h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909141858817.png" alt="image-20240909141858817"></p><h1 id="单列集合（除了树"><a href="#单列集合（除了树" class="headerlink" title="单列集合（除了树"></a>单列集合（除了树</h1><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909113834277.png" alt="image-20240909113834277"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909145119047.png" alt="image-20240909145119047"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909145142290.png" alt="image-20240909145142290"></p><h2 id="集合中的引用类"><a href="#集合中的引用类" class="headerlink" title="集合中的引用类"></a>集合中的引用类</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909145456540.png" alt="image-20240909145456540"></p><p>关于引用类，有很多像equals<strong>这样的接口是要在引用类中重写的。</strong></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909145914214.png" alt="image-20240909145914214"></p><p><strong>Collection</strong></p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909154008051.png" alt="image-20240909154008051"></p><p>二叉树：普通。</p><p>二叉搜索树：比父节点小的在左，大的在右。</p><p>平衡二叉树：二叉搜索树。任意节点的左右子树高度都不超过1。</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909154904479.png" alt="image-20240909154904479"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909155032989.png" alt="image-20240909155032989"></p><p>红黑树：二叉搜索树，规则如上。（好难orz</p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909160101260.png" alt="image-20240909160101260"></p><h2 id="hashset"><a href="#hashset" class="headerlink" title="hashset"></a>hashset</h2><h3 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h3><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909160301447.png" alt="image-20240909160301447"></p><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909160630682.png" alt="image-20240909160630682"></p><p><strong>数组+链表+红黑树</strong></p><h1 id="双列集合"><a href="#双列集合" class="headerlink" title="双列集合"></a>双列集合</h1><h2 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909161630544.png" alt="image-20240909161630544"></p><p><strong>遍历方式有三种：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hsmap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashMap&lt;String,String&gt; hmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hmap.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        hmap.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        hmap.put(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line">        hmap.put(<span class="string">&quot;key4&quot;</span>, <span class="string">&quot;value4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一种遍历方式</span></span><br><span class="line">        <span class="comment">//将key变为单列</span></span><br><span class="line">        Set&lt;String&gt; keys = hmap.keySet();</span><br><span class="line">        <span class="keyword">for</span>(String key : keys)&#123;</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+hmap.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种</span></span><br><span class="line">        <span class="comment">//entry:表示键值对对象</span></span><br><span class="line">        <span class="comment">//set:set单列集合</span></span><br><span class="line">        <span class="comment">//entryset相当于把键值对对象（value；key；）放到set当中</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = hmap.entrySet();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, String&gt; entry : entries)&#123;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">&quot;=&quot;</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第三种使用foreach</span></span><br><span class="line">        hmap.forEach((k,v) -&gt; System.out.println(k+<span class="string">&quot;=&quot;</span>+v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hashmap"><a href="#hashmap" class="headerlink" title="hashmap"></a>hashmap</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909163443666.png" alt="image-20240909163443666"></p><p>LinkedHashMap</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240909163812019.png" alt="image-20240909163812019"></p><p><strong>因为有双项链表所以才有序</strong></p><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>可定义key的排序规则，自动升序。</p><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (<span class="type">int</span> a,<span class="type">int</span>... args)</span><br></pre></td></tr></table></figure><p>可变参数一定要写在最后。</p><h1 id="初识线程"><a href="#初识线程" class="headerlink" title="初识线程"></a>初识线程</h1><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231026165509655.png" alt="image-20231026165509655"></p><p>线程是抢占式调度</p><p>线程优先级只是一个概率大小的问题</p><p>守护线程，是其他线程结束后，才会陆陆续续的结束的线程（不是立马停止</p><p>礼让线程，类名.方法，让出当前CPU尽可能让线程执行均匀（了解即可</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231026171453249.png" alt="image-20231026171453249"></p><p>很重要的一张图</p><h1 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h1><p>线程执行时，具有随机性，在当前线程执行时，cpu的执行权很可能被其他线程给抢走。（特别是对于共享代码块）</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231026172550534.png" alt="image-20231026172550534"></p><p>锁机制就是一种常用的同步机制，它可以用来保护共享资源，确保在某个线程访问共享资源时，其他线程无法同时修改该资源，从而保证数据的一致性。通过加锁，我们可以控制多线程对共享资源的访问顺序和互斥性，避免竞争条件的发生。</p><p>加锁并不意味着多线程失去了意义。相反，合理地使用锁可以解决线程间的竞争问题，保证数据的正确性，并发执行的优势依然存在。锁的作用是提供了一种同步机制，使得多线程能够协调地访问共享资源，确保线程间的互斥和顺序性，从而避免数据的混乱和冲突。</p><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized ()"></a>synchronized ()</h2><h2 id="检测到线程进来自动的关锁，线程执行完又自动的开锁。"><a href="#检测到线程进来自动的关锁，线程执行完又自动的开锁。" class="headerlink" title="检测到线程进来自动的关锁，线程执行完又自动的开锁。"></a>检测到线程进来自动的关锁，线程执行完又自动的开锁。</h2><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><p>就是把<strong>一段</strong>共享代码块锁起来，这样可以避免共享数据时的抢占安全性问题。</p><p>如果把整个方法里的代码全部锁起来就不用在代码块外面包裹synchronized （）{}了直接在方法外面锁。</p><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231026175916165.png" alt="image-20231026175916165"></p><!--StringBuilder 是 Java 中的一个可变字符串类，它允许在字符串中进行动态的添加、修改和删除操作，而无需创建新的字符串对象。需要注意的是，由于 StringBuilder 是非线程安全的，如果在多线程环境下使用，应使用 StringBuffer 类，它提供了与 StringBuilder 类似的功能，但是是线程安全的。--><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><p>手动开锁和关锁。<img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231026181718576.png" alt="image-20231026181718576"></p><p>关于死锁：切记不要让两个锁嵌套起来。</p><h2 id="生产者和消费者（等待唤醒机制）"><a href="#生产者和消费者（等待唤醒机制）" class="headerlink" title="生产者和消费者（等待唤醒机制）"></a>生产者和消费者（等待唤醒机制）</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231026183012391.png"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231026183031447.png" alt="image-20231026183031447"></p><p>线程四步走</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231026183332535.png" alt="image-20231026183332535"></p><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231026184524198.png"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231026225840628.png" alt="image-20231026225840628"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231026225856072.png" alt="image-20231026225856072"></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027013422240.png" alt="image-20231027013422240"></p><h2 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h2><p>需要的7个参数</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027214714964.png"></p><p>核心线程都在忙，排核心线程的队已经排满，这个时候才创建临时线程。</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027215115033.png" alt="image-20231027215115033"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027215627052.png" alt="image-20231027215627052"></p><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027220049242.png" alt="image-20231027220049242"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027220315718.png" alt="image-20231027220315718"></p><p>会出现ip不够用</p><p>所以有了ipv6</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027220445349.png" alt="image-20231027220445349"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027220527693.png" alt="image-20231027220527693"></p><p>节省ipv4的方式</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027220702656.png" alt="image-20231027220702656"></p><p>在每个地方的局域网，都可能碰上不一样的路由给我的电脑分配不一样的ip地址，<strong>向一个ip发送消息是限制地方的</strong>。如果向该ip地址发送一些消息，如下：</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027221015437.png" alt="image-20231027221015437"></p><p>但是localhost:（127.0.0.1）是一个特殊地址，是一个本地回环地址，即为本机ip。此时发送消息时不经过路由器的。所以<strong>向这个ip发送东西不限制地方。</strong>如下：<img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027221122028.png" alt="image-20231027221122028"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027221347007.png" alt="image-20231027221347007"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027222753174.png" alt="image-20231027222753174"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027222929128.png" alt="image-20231027222929128"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027223027151.png" alt="image-20231027223027151"></p><h2 id="UDP通信协议"><a href="#UDP通信协议" class="headerlink" title="UDP通信协议"></a>UDP通信协议</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027234540817.png" alt="image-20231027234540817"></p><h2 id="TCP通信协议"><a href="#TCP通信协议" class="headerlink" title="TCP通信协议"></a>TCP通信协议</h2><h3 id=""><a href="#" class="headerlink" title=""></a><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231027235130026.png"></h3>]]></content>
      
      
      <categories>
          
          <category> 我随便写写，你随便看看 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理</title>
      <link href="/2024/11/28/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
      <url>/2024/11/28/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="数字图像处理"><a href="#数字图像处理" class="headerlink" title="数字图像处理"></a>数字图像处理</h1><h2 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h2><p><strong>OpenCV加载的彩色图像处于BGR模式</strong>。但是Matplotlib以RGB模式显示。因此，如果使用OpenCV读取彩色图像，则Matplotlib中将无法正确显示彩色图像。有关更多详细信息，请参见练习。</p><h3 id="读取图像"><a href="#读取图像" class="headerlink" title="读取图像"></a>读取图像</h3><p>使用<strong>cv.imread</strong>()函数读取图像。图像应该在工作目录或图像的完整路径应给出。</p><p>第二个参数是一个标志，它指定了读取图像的方式。</p><ul><li>cv.IMREAD_COLOR： 加载彩色图像。任何图像的透明度都会被忽视。它是默认标志。</li><li>cv.IMREAD_GRAYSCALE：以灰度模式加载图像</li><li>cv.IMREAD_UNCHANGED：加载图像，包括alpha通道</li></ul><blockquote><p><strong>注意</strong> 除了这三个标志，你可以分别简单地传递整数1、0或-1。</p></blockquote><p>请参见下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">＃加载彩色灰度图像</span><br><span class="line">img = cv.imread(<span class="string">&#x27;messi5.jpg&#x27;</span>，<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="显示图像"><a href="#显示图像" class="headerlink" title="显示图像"></a>显示图像</h3><p>使用函数**cv.imshow()**在窗口中显示图像。窗口自动适合图像尺寸。</p><p>第一个参数是窗口名称，它是一个字符串。第二个参数是我们的对象。你可以根据需要创建任意多个窗口，但可以使用不同的窗口名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cv.imshow(<span class="string">&quot;gezi&quot;</span>,img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>);<span class="comment">##可以传入等号左边一个k值表示传入键值（如下</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><strong>cv.waitKey</strong>()是一个键盘绑定函数。其参数是以毫秒为单位的时间。该函数等待任何键盘事件指定的毫秒。如果您在这段时间内按下任何键，程序将继续运行。如果<strong>0</strong>被传递，它将无限期地等待一次敲击键。它也可以设置为检测特定的按键</p><h3 id="写入图像"><a href="#写入图像" class="headerlink" title="写入图像"></a>写入图像</h3><p>使用函数<strong>cv.imwrite</strong>()保存图像。第一个参数是文件名，第二个参数是要保存的图像。 <code>cv.imwrite(&#39;messigray.png&#39;，img)</code>这会将图像以PNG格式保存在工作目录中。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">img = cv.imread(<span class="string">&#x27;messi5.jpg&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">cv.imshow(<span class="string">&#x27;image&#x27;</span>,img)</span><br><span class="line">k = cv.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> k == <span class="number">27</span>:         <span class="comment"># 等待ESC退出</span></span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"><span class="keyword">elif</span> k == <span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>): <span class="comment"># 等待关键字，保存和退出</span></span><br><span class="line">    cv.imwrite(<span class="string">&#x27;messigray.png&#x27;</span>,img)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="使用Matplotlib"><a href="#使用Matplotlib" class="headerlink" title="使用Matplotlib"></a>使用Matplotlib</h3><p>Matplotlib是Python的绘图库，可为你提供多种绘图方法。你将在接下来的文章中看到它们。在这里，你将学习如何使用Matplotlib显示图像。你可以使用Matplotlib缩放图像，保存图像等。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">img = cv.imread(<span class="string">&#x27;messi5.jpg&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">plt.imshow(img, cmap = <span class="string">&#x27;gray&#x27;</span>, interpolation = <span class="string">&#x27;bicubic&#x27;</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])  <span class="comment"># 隐藏 x 轴和 y 轴上的刻度值</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="plt的具体使用"><a href="#plt的具体使用" class="headerlink" title="plt的具体使用"></a>plt的具体使用</h4><p>在任何绘图之前，我们需要一个Figure对象，可以理解成我们需要一张画板才能开始绘图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig = plt.figure()</span><br></pre></td></tr></table></figure><p>在拥有Figure对象之后，在作画前我们还需要轴，没有轴的话就没有绘图基准，所以需要添加Axes。也可以理解成为真正可以作画的纸。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">ax.<span class="built_in">set</span>(xlim=[<span class="number">0.5</span>, <span class="number">4.5</span>], ylim=[-<span class="number">2</span>, <span class="number">8</span>], title=<span class="string">&#x27;An Example Axes&#x27;</span>,</span><br><span class="line">       ylabel=<span class="string">&#x27;Y-Axis&#x27;</span>, xlabel=<span class="string">&#x27;X-Axis&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>对于上面的fig.add_subplot(111)就是添加Axes的，</p><p>参数的解释：</p><p>在画板的第1行第1列的第一个位置生成一个Axes对象来准备作画。也可以通过fig.add_subplot(2, 2, 1)的方式生成Axes，前面两个参数确定了面板的划分，例如 <code>2， 2会将整个面板划分成 2 * 2 的方格</code>，第三个参数取值范围是 [1, 2*2] 表示第几个Axes。如下面的例子：</p><h2 id="绘制操作"><a href="#绘制操作" class="headerlink" title="绘制操作"></a>绘制操作</h2><p>在上述所有功能中，您将看到一些常见的参数，如下所示：</p><ul><li>img：您要绘制形状的图像</li><li>color：形状的颜色。对于BGR，将其作为元组传递，例如：(255,0,0)对于蓝色。对于灰度，只需传递标量值即可。</li><li>厚度：线或圆等的粗细。如果对闭合图形（如圆）传递<code>-1</code> ，它将填充形状。<em>默认厚度&#x3D; 1</em></li><li>lineType：线的类型，是否为8连接线，抗锯齿线等。<em>默认情况下</em>，为8连接线。<strong>cv.LINE_AA</strong>给出了抗锯齿的线条，看起来非常适合曲线。</li></ul><h4 id="绘制直线"><a href="#绘制直线" class="headerlink" title="绘制直线"></a>绘制直线</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.line(img,start,end,color,thickness)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>img:要绘制直线的图像</li><li>Start,end: 直线的起点和终点</li><li>color: 线条的颜色</li><li>Thickness: 线条宽度</li></ul><h4 id="绘制圆形"><a href="#绘制圆形" class="headerlink" title="绘制圆形"></a>绘制圆形</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.circle(img,centerpoint, r, color, thickness)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>img:要绘制圆形的图像</li><li>Centerpoint, r: 圆心和半径</li><li>color: 线条的颜色</li><li>Thickness: 线条宽度，为-1时生成闭合图案并填充颜色</li></ul><h4 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.rectangle(img,leftupper,rightdown,color,thickness)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>img:要绘制矩形的图像</li><li>Leftupper, rightdown: 矩形的左上角和右下角坐标</li><li>color: 线条的颜色</li><li>Thickness: 线条宽度</li></ul><h3 id="向图像中添加文字"><a href="#向图像中添加文字" class="headerlink" title="向图像中添加文字"></a>向图像中添加文字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.putText(img,text,station, font, fontsize,color,thickness,cv.LINE_AA)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>img: 图像</li><li>text：要写入的文本数据</li><li>station：文本的放置位置</li><li>font：字体</li><li>Fontsize :字体大小</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>我们生成一个全黑的图像，然后在里面绘制图像并添加文字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 1 创建一个空白的图像</span></span><br><span class="line">img = np.zeros((<span class="number">512</span>,<span class="number">512</span>,<span class="number">3</span>), np.uint8)</span><br><span class="line"><span class="comment"># 2 绘制图形</span></span><br><span class="line">cv.line(img,(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">511</span>,<span class="number">511</span>),(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">5</span>)</span><br><span class="line">cv.rectangle(img,(<span class="number">384</span>,<span class="number">0</span>),(<span class="number">510</span>,<span class="number">128</span>),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">3</span>)</span><br><span class="line">cv.circle(img,(<span class="number">447</span>,<span class="number">63</span>), <span class="number">63</span>, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), -<span class="number">1</span>)</span><br><span class="line">font = cv.FONT_HERSHEY_SIMPLEX</span><br><span class="line">cv.putText(img,<span class="string">&#x27;OpenCV&#x27;</span>,(<span class="number">10</span>,<span class="number">500</span>), font, <span class="number">4</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),<span class="number">2</span>,cv.LINE_AA)</span><br><span class="line"><span class="comment"># 3 图像展示</span></span><br><span class="line">plt.imshow(img[:,:,::-<span class="number">1</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;匹配结果&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zeros(): 这是NumPy库中的函数，用于创建指定形状的全零数组。</span><br><span class="line"></span><br><span class="line">(<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>): 这个元组表示了数组的形状。在这里，(<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>)表示创建一个三维数组，其中第一个维度长度为<span class="number">512</span>，第二个维度长度为<span class="number">512</span>，第三个维度长度为<span class="number">3</span>。这种形式通常用于表示彩色图像，其中<span class="number">512</span>x512表示图像的高度和宽度，<span class="number">3</span>表示图像的RGB通道。</span><br><span class="line"></span><br><span class="line">因此，通过zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>))这行代码可以创建一个大小为<span class="number">512</span>x512的全零三维数组，用于表示一个黑色的<span class="number">512</span>x512像素的彩色图像。</span><br></pre></td></tr></table></figure><h3 id="鼠标绘制"><a href="#鼠标绘制" class="headerlink" title="鼠标绘制"></a>鼠标绘制</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">drawing = <span class="literal">False</span> <span class="comment"># 如果按下鼠标，则为真</span></span><br><span class="line">mode = <span class="literal">True</span> <span class="comment"># 如果为真，绘制矩形。按 m 键可以切换到曲线</span></span><br><span class="line">ix,iy = -<span class="number">1</span>,-<span class="number">1</span></span><br><span class="line"><span class="comment"># 鼠标回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">event,x,y,flags,param</span>):</span><br><span class="line">    <span class="keyword">global</span> ix,iy,drawing,mode</span><br><span class="line">    <span class="keyword">if</span> event == cv.EVENT_LBUTTONDOWN:</span><br><span class="line">        drawing = <span class="literal">True</span></span><br><span class="line">        ix,iy = x,y</span><br><span class="line">    <span class="keyword">elif</span> event == cv.EVENT_MOUSEMOVE:</span><br><span class="line">        <span class="keyword">if</span> drawing == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> mode == <span class="literal">True</span>:</span><br><span class="line">                cv.rectangle(img,(ix,iy),(x,y),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cv.circle(img,(x,y),<span class="number">5</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> event == cv.EVENT_LBUTTONUP:</span><br><span class="line">        drawing = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> mode == <span class="literal">True</span>:</span><br><span class="line">            cv.rectangle(img,(ix,iy),(x,y),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cv.circle(img,(x,y),<span class="number">5</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> event == cv.EVENT_RBUTTONUP:</span><br><span class="line">        mode=<span class="keyword">not</span> mode;</span><br><span class="line"><span class="comment"># 创建一个黑色的图像，一个窗口，并绑定到窗口的功能</span></span><br><span class="line">img = np.zeros((<span class="number">512</span>,<span class="number">512</span>,<span class="number">3</span>), np.uint8)</span><br><span class="line">cv.namedWindow(<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line"><span class="comment"># 鼠标回调函数</span></span><br><span class="line">cv.setMouseCallback(<span class="string">&#x27;image&#x27;</span>,draw_circle)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv.imshow(<span class="string">&#x27;image&#x27;</span>,img)</span><br><span class="line">    <span class="keyword">if</span> cv.waitKey(<span class="number">20</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><hr><p>global 关键字用于声明在函数内部使用全局变量。</p><p>逻辑非运算符 not</p><h3 id="轨迹栏"><a href="#轨迹栏" class="headerlink" title="轨迹栏"></a>轨迹栏</h3><p>在这里，我们将创建一个简单的应用程序，以显示您指定的颜色。您有一个显示颜色的窗口，以及三个用于指定B、G、R颜色的跟踪栏。滑动轨迹栏，并相应地更改窗口颜色。默认情况下，初始颜色将设置为黑色。</p><p>对于<code>cv.getTrackbarPos()</code>函数，第一个参数是轨迹栏名称，第二个参数是它附加到的窗口名称，第三个参数是默认值，第四个参数是最大值，第五个是执行的回调函数每次跟踪栏值更改。回调函数始终具有默认参数，即轨迹栏位置。在我们的例子中，函数什么都不做，所以我们简单地通过。</p><p>轨迹栏的另一个重要应用是将其用作按钮或开关。默认情况下，OpenCV不具有按钮功能。因此，您可以使用轨迹栏获得此类功能。在我们的应用程序中，我们创建了一个开关，只有在该开关为ON的情况下，该应用程序才能在其中运行，否则屏幕始终为黑色。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nothing</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 创建一个黑色的图像，一个窗口</span></span><br><span class="line">img = np.zeros((<span class="number">300</span>,<span class="number">512</span>,<span class="number">3</span>), np.uint8)</span><br><span class="line">cv.namedWindow(<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建颜色变化的轨迹栏</span></span><br><span class="line">cv.createTrackbar(<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;image&#x27;</span>,<span class="number">0</span>,<span class="number">255</span>,nothing)</span><br><span class="line">cv.createTrackbar(<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;image&#x27;</span>,<span class="number">0</span>,<span class="number">255</span>,nothing)</span><br><span class="line">cv.createTrackbar(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;image&#x27;</span>,<span class="number">0</span>,<span class="number">255</span>,nothing)</span><br><span class="line"><span class="comment"># 为 ON/OFF 功能创建开关</span></span><br><span class="line">switch = <span class="string">&#x27;0 : OFF \n1 : ON&#x27;</span></span><br><span class="line">cv.createTrackbar(switch, <span class="string">&#x27;image&#x27;</span>,<span class="number">0</span>,<span class="number">1</span>,nothing)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv.imshow(<span class="string">&#x27;image&#x27;</span>,img)</span><br><span class="line">    k = cv.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 得到四条轨迹的当前位置</span></span><br><span class="line">    r = cv.getTrackbarPos(<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    g = cv.getTrackbarPos(<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    b = cv.getTrackbarPos(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;image&#x27;</span>):</span><br><span class="line">    s = cv.getTrackbarPos(switch,<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> s == <span class="number">0</span>:</span><br><span class="line">        img[:] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        img[:] = [b,g,r]</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><hr><p>img[:]是img的所有元素</p><h3 id="获取并修改图像中的像素点"><a href="#获取并修改图像中的像素点" class="headerlink" title="获取并修改图像中的像素点"></a>获取并修改图像中的像素点</h3><p>我们可以通过行和列的坐标值获取该像素点的像素值。对于BGR图像，它返回一个蓝，绿，红值的数组。对于灰度图像，仅返回相应的强度值。使用相同的方法对像素值进行修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">img = cv.imread(<span class="string">&#x27;messi5.jpg&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取某个像素点的值</span></span><br><span class="line">px = img[<span class="number">100</span>,<span class="number">100</span>]</span><br><span class="line"><span class="comment"># 仅获取蓝色通道的强度值</span></span><br><span class="line">blue = img[<span class="number">100</span>,<span class="number">100</span>,<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 修改某个位置的像素值</span></span><br><span class="line">img[<span class="number">100</span>,<span class="number">100</span>] = [<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>]</span><br></pre></td></tr></table></figure><h3 id="获取图像的属性"><a href="#获取图像的属性" class="headerlink" title="获取图像的属性"></a>获取图像的属性</h3><p>图像属性包括行数，列数和通道数，图像数据类型，像素数等。</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20240319154823884.png" alt="image-20191016151042764"></p><h3 id="图像通道的拆分与合并"><a href="#图像通道的拆分与合并" class="headerlink" title="图像通道的拆分与合并"></a>图像通道的拆分与合并</h3><p>有时需要在B，G，R通道图像上单独工作。在这种情况下，需要将BGR图像分割为单个通道。或者在其他情况下，可能需要将这些单独的通道合并到BGR图像。你可以通过以下方式完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通道拆分</span></span><br><span class="line">b,g,r = cv.split(img)</span><br><span class="line"><span class="comment"># 通道合并</span></span><br><span class="line">img = cv.merge((b,g,r))</span><br></pre></td></tr></table></figure><h3 id="色彩空间的改变"><a href="#色彩空间的改变" class="headerlink" title="色彩空间的改变"></a>色彩空间的改变</h3><p>OpenCV中有150多种颜色空间转换方法。最广泛使用的转换方法有两种，BGR↔Gray和BGR↔HSV。</p><p>API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.cvtColor(input_image，flag)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>input_image: 进行颜色空间转换的图像</li><li>flag: 转换类型<ul><li>cv.COLOR_BGR2GRAY : BGR↔Gray</li><li>cv.COLOR_BGR2HSV: BGR→HSV</li></ul></li></ul><h2 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h2><p>当我们谈论图像处理时，傅里叶变换是一项非常重要的工具。傅里叶变换可以将一个图像从空间域（时域）转换到频域，从而<strong>揭示图像中不同频率的成分</strong>。在频域中，图像可以表示为由不同频率的正弦和余弦函数组成的复杂图案。</p><p><code>傅里叶变换的基本思想是将一个信号（包括图像）分解为一系列不同频率的正弦和余弦波形</code>，每个波形都有特定的振幅和相位。这样做的好处是，通过查看图像的频谱，我们可以分析图像中不同频率的成分，并且可以在频域中对图像进行各种操作，例如滤波、增强特定频率的成分等。</p><p><code>频域滤波是在频域中对图像进行滤波操作的过程</code>。通过对图像的频谱进行操作，<code>我们可以滤除或增强图像中特定频率的成分</code>。<strong>这种方法在图像去噪、边缘检测、图像增强等方面都有广泛的应用</strong>。</p><p>常见的频域滤波包括：</p><p><strong>低通滤波器</strong>：滤除高频成分，保留图像中的低频信息，<strong>常用于图像去噪</strong>。<br>  <strong>高通滤波器</strong>：滤除低频成分，保留图像中的高频信息，<strong>常用于边缘检测</strong>。<br>  <strong>带通滤波器</strong>：只保留某个频率范围内的成分，常用于图像增强和特定频率的提取。<br>通过在频域中对图像进行滤波操作，我们可以实现一些在空间域中难以实现的图像处理任务，同时也可以更好地理解图像的频率特性.</p><p>对于图像，使用<strong>2D离散傅里叶变换</strong>(DFT)查找频域。一种称为<strong>快速傅立叶变换</strong>(FFT)的快速算法用于DFT的计算。</p><h3 id="numpy实现"><a href="#numpy实现" class="headerlink" title="numpy实现"></a>numpy实现</h3><p><strong>傅里叶变换可逆</strong>，傅里叶变换是为了得到图片低频和高频做不同的处理。</p><p>numpy.fft.fft2:实现傅里叶变换，傅里叶变换返回的是一个复数数组</p><p>numpy.fft.fftshiift：将0频域移到频谱中心（低频</p><p>20*np.log(np.abs(fshift)):将复数变成灰度图</p><p>以上只是得到频谱信息。低频是细节信息，高频是边缘信息。</p><p>进行低频或者高频处理之后，进行图像逆变换（即恢复原始图像），处理的信息也会反应在原始图像上。</p><h2 id="逆傅里叶变换"><a href="#逆傅里叶变换" class="headerlink" title="逆傅里叶变换"></a>逆傅里叶变换</h2><h3 id="numpy实现-1"><a href="#numpy实现-1" class="headerlink" title="numpy实现"></a>numpy实现</h3><p>numpy.fft.iffshift:fftshiift的逆函数。（中心0频域又回到左上角</p><p>numpy.fft.ifft2:逆变换</p>]]></content>
      
      
      <categories>
          
          <category> 我随便写写，你随便看看 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 图像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2024/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="1-0认识计算机网络"><a href="#1-0认识计算机网络" class="headerlink" title="1.0认识计算机网络"></a>1.0认识计算机网络</h1><h2 id="1-1-1计算机网络功能"><a href="#1-1-1计算机网络功能" class="headerlink" title="1.1.1计算机网络功能"></a>1.1.1计算机网络功能</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110154848142.png" alt="image-20231110154848142"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110155109664.png" alt="image-20231110155109664"></p><h2 id="1-1-2组成与分类"><a href="#1-1-2组成与分类" class="headerlink" title="1.1.2组成与分类"></a>1.1.2组成与分类</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110160724324.png" alt="image-20231110160724324"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110161507269.png" alt="image-20231110161507269"></p><p>总结：</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110161543344.png" alt="image-20231110161543344"></p><h2 id="1-1-4性能指标"><a href="#1-1-4性能指标" class="headerlink" title="1.1.4性能指标"></a>1.1.4性能指标</h2><p>速率</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110162025607.png" alt="image-20231110162025607"></p><p>带宽</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110162542173.png" alt="image-20231110162542173"></p><p><strong>带宽</strong>可以理解为发送的最高速率：向通信线路发送</p><p><strong>传播速率</strong>：顾名思义是传播的速度</p><p>一个是生蛋，一个是送蛋。</p><p>吞吐量</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110163625207.png" alt="image-20231110163625207"></p><p>时延</p><p>注意：传输时延和传播时延不一样，<strong>传输时延&#x3D;发送时延</strong></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110164354585.png" alt="image-20231110164354585"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110164447485.png" alt="image-20231110164447485"></p><p>往返时延：是从发送方将第一个数据放到信道上开始</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110164623363.png" alt="image-20231110164623363"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110164910310.png" alt="image-20231110164910310"></p><p>信道利用率是会重点考察的</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110165117160.png" alt="image-20231110165117160"></p><p>总结：</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110165306067.png" alt="image-20231110165306067"></p><h2 id="1-2-1分层结构、协议、接口、服务"><a href="#1-2-1分层结构、协议、接口、服务" class="headerlink" title="1.2.1分层结构、协议、接口、服务"></a>1.2.1分层结构、协议、接口、服务</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110171351094.png" alt="image-20231110171351094"></p><p>**</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110171810375.png" alt="image-20231110171810375"></p><p>总结：</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110172003080.png" alt="image-20231110172003080"></p><h2 id="1-2-2IOS参考模型"><a href="#1-2-2IOS参考模型" class="headerlink" title="1.2.2IOS参考模型"></a>1.2.2IOS参考模型</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110172247753.png"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110172345267.png" alt="image-20231110172345267"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110172437548.png" alt="image-20231110172437548"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110172744052.png" alt="image-20231110172744052"></p><p>过程要记住</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110172902060.png" alt="image-20231110172902060"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110173336208.png" alt="image-20231110173336208"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110173514441.png" alt="image-20231110173514441"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110173841063.png" alt="image-20231110173841063"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110174444567.png" alt="image-20231110174444567"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110174449423.png" alt="image-20231110174449423"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110174651781.png" alt="image-20231110174651781"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110174805851.png" alt="image-20231110174805851"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110174921430.png" alt="image-20231110174921430"></p><h2 id="1-2-3TCP-IP"><a href="#1-2-3TCP-IP" class="headerlink" title="1.2.3TCP&#x2F;IP"></a>1.2.3TCP&#x2F;IP</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110175011115.png" alt="image-20231110175011115"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110175241714.png" alt="image-20231110175241714"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110175352446.png" alt="image-20231110175352446"></p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110175615030.png" alt="image-20231110175615030"></p><h1 id="2-0物理层（选择题"><a href="#2-0物理层（选择题" class="headerlink" title="2.0物理层（选择题"></a>2.0物理层（选择题</h1><h2 id="2-1-1基本概念"><a href="#2-1-1基本概念" class="headerlink" title="2.1.1基本概念"></a>2.1.1基本概念</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20231110175922540.png" alt="image-20231110175922540"></p>]]></content>
      
      
      <categories>
          
          <category> 我随便写写，你随便看看 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 408! </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习-Vue</title>
      <link href="/2024/11/05/%E5%89%8D%E7%AB%AFvue/"/>
      <url>/2024/11/05/%E5%89%8D%E7%AB%AFvue/</url>
      
        <content type="html"><![CDATA[<h1 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h1><h2 id="vue中，父组件给子组件传值，子组件给父组件传值，怎么传，请举例说明"><a href="#vue中，父组件给子组件传值，子组件给父组件传值，怎么传，请举例说明" class="headerlink" title="vue中，父组件给子组件传值，子组件给父组件传值，怎么传，请举例说明"></a>vue中，父组件给子组件传值，子组件给父组件传值，怎么传，请举例说明</h2><p>在Vue中，父组件向子组件传递数据通常使用<code>props</code>，而子组件向父组件传递数据则使用自定义事件(<code>$emit</code>)。下面我将通过一个简单的例子来说明这两个过程。</p><p>如果你在使用Vue 3的<code>setup</code>语法糖的同时，还想保持选项式API的风格，你可以这样做：</p><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><p><strong>父组件 (<code>ParentComponent.vue</code>):</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">    &lt;ChildComponent :message=&quot;parentMessage&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const parentMessage = ref(&#x27;来自父组件的消息&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>子组件 (<code>ChildComponent.vue</code>):</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;子组件&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineProps &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  message: String</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><p><strong>子组件 (<code>ChildComponent.vue</code>):</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;子组件&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;sendMessageToParent&quot;&gt;发送消息给父组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineEmits &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const emit = defineEmits([&#x27;child-event&#x27;]);</span><br><span class="line"></span><br><span class="line">function sendMessageToParent() &#123;</span><br><span class="line">  emit(&#x27;child-event&#x27;, &#x27;来自子组件的消息&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>父组件 (<code>ParentComponent.vue</code>):</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">    &lt;ChildComponent @child-event=&quot;handleChildEvent&quot; /&gt;</span><br><span class="line">    &lt;p&gt;从子组件接收到的消息: &#123;&#123; childMessage &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const childMessage = ref(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">function handleChildEvent(message) &#123;</span><br><span class="line">  childMessage.value = message;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用了<code>&lt;script setup&gt;</code>语法糖，这是Vue 3中推荐的一种更简洁的组件编写方式。在<code>&lt;script setup&gt;</code>中，我们可以直接使用<code>ref</code>来定义响应式数据，使用<code>defineProps</code>来定义组件的<code>props</code>，以及使用<code>defineEmits</code>来定义组件可以触发的事件。</p><p>这种方式结合了组合式API的简洁性和选项式API的风格，使得代码更加清晰和易于维护。</p><h1 id="reactive和ref"><a href="#reactive和ref" class="headerlink" title="reactive和ref"></a>reactive和ref</h1><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><p>接受类型：对象类型（object）</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>接受类型：简单类型或者对象类型（object）</p><h1 id="computed计算函数"><a href="#computed计算函数" class="headerlink" title="computed计算函数"></a>computed计算函数</h1><p>对某一个值进行计算（包括过滤filter等语法运用）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list=<span class="title function_">ref</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="keyword">const</span> reslist=<span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item&gt;<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><blockquote><p>不包括任何副作用：只是对值操作，不进行任何dom操作或者异步操作（可以给watch（）做）<br>通常只是读操作；不建议直接修改计算属性的值</p></blockquote><h1 id="watch函数"><a href="#watch函数" class="headerlink" title="watch函数"></a>watch函数</h1><p>在watch里面ref是不用写.value的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count=<span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> name=<span class="title function_">ref</span>(<span class="string">&#x27;czy&#x27;</span>);</span><br><span class="line"><span class="title function_">wacth</span>([count,name],<span class="function">(<span class="params">[newCount,newName],[oldCount,oldName]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;变化了&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="deep深度监听"><a href="#deep深度监听" class="headerlink" title="deep深度监听"></a>deep深度监听</h2><p>开启deep就是深度侦听：可以侦听object的属性（不开启是不能的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;czy&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">ref</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;czy&#x27;</span>&#125;);</span><br><span class="line"><span class="title function_">wacth</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;改变了&quot;</span>)</span><br><span class="line">&#125;, &#123;<span class="attr">deep</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">//deep是有损耗的，尽量不开启，如果要监听obeject里的属性可以</span></span><br><span class="line"><span class="comment">//写成这样：</span></span><br><span class="line"><span class="title function_">wacth</span>(<span class="function">() =&gt;</span> user.<span class="property">value</span>.<span class="property">name</span>, </span><br><span class="line">    <span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;改变了&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure><h1 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h1><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>Vue.js 3 的生命周期函数与 Vue.js 2 有一些不同，但它们都提供了一种在组件生命周期的不同阶段执行特定逻辑的方法。以下是 Vue.js 3 中的主要生命周期钩子及其用途的详细解释：</p><h3 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h3><ol><li><p><code>beforeCreate</code> (不推荐使用)</p><ul><li>在实例初始化之后，数据观测 (data observer) 和 event&#x2F;watcher 事件配置之前被调用。</li><li>由于 Vue 3 中引入了 Composition API，<code>beforeCreate</code> 钩子很少使用，因为大多数初始化逻辑应该在 <code>setup()</code> 函数中完成。</li></ul></li><li><p><code>created</code></p><ul><li>在实例创建完成后被立即调用。</li><li>此时实例已完成数据观测，属性和方法的运算，watch&#x2F;event 事件回调。然而，挂载阶段还没开始，<code>$el</code> 属性目前不可见。</li><li>适合进行数据获取和事件监听等不需要 DOM 的操作。</li></ul></li></ol><h3 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h3><ol start="3"><li><p><code>beforeMount</code></p><ul><li>在挂载开始之前被调用：相关的 <code>render</code> 函数首次被调用。</li><li>此时模板编译完成，但尚未挂载到 DOM 上。</li></ul></li><li><p><code>mounted</code></p><ul><li>在实例挂载到 DOM 后被调用。</li><li>此时可以访问到 DOM 元素，适合进行 DOM 操作和第三方库的初始化。</li></ul></li></ol><h3 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h3><ol start="5"><li><p><code>beforeUpdate</code></p><ul><li>在数据更新时调用，发生在虚拟 DOM 打补丁之前。</li><li>可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li></ul></li><li><p><code>updated</code></p><ul><li>在由于数据更改导致的虚拟 DOM 重新渲染和打补丁之后调用。</li><li>此时组件 DOM 已经更新，可以执行依赖于 DOM 的操作。</li></ul></li></ol><h3 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h3><ol start="7"><li><p><code>beforeUnmount</code> (Vue 3 新增)</p><ul><li>在卸载组件实例之前调用。</li><li>在这个阶段，实例仍然是完全正常的，适合进行清理工作，比如取消定时器或清除监听器。</li></ul></li><li><p><code>unmounted</code> (Vue 3 新增)</p><ul><li>在卸载组件实例之后调用。</li><li>此时组件实例的所有指令都被解绑，所有的事件监听器被移除，所有的子组件实例也都被卸载。</li></ul></li></ol><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><ol start="9"><li><code>errorCaptured</code> (Vue 3 新增)<ul><li>当捕获一个来自子孙组件的错误时被调用。</li><li>可以返回 <code>false</code> 来阻止该错误继续向上传播。</li></ul></li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><code>onMounted</code>, <code>onUpdated</code>, <code>onUnmounted</code> 等是 Composition API 中的生命周期钩子，它们与选项 API 中的 <code>mounted</code>, <code>updated</code>, <code>unmounted</code> 类似，但需要在 <code>setup()</code> 函数中使用，并且是作为组合式函数调用的。</li></ul><p>在 Vue 3 中，Composition API 提供了一种更灵活的方式来组织和重用逻辑，而生命周期钩子则是这种模式的一部分。开发者可以根据需要在 <code>setup()</code> 函数中使用这些钩子，或者继续使用选项 API 的生命周期钩子。</p><h1 id="provide和inject跨组件通信"><a href="#provide和inject跨组件通信" class="headerlink" title="provide和inject跨组件通信"></a>provide和inject跨组件通信</h1><p><code>provide</code> 和 <code>inject</code> 是 Vue.js 3 中 Composition API 的一部分，用于跨组件层级直接传递数据，而不需要通过每个层级的组件显式地通过 <code>props</code> 和 <code>events</code> 传递。这种方式特别适用于高层次的插件&#x2F;组件库作者，或者当你需要在多个组件之间共享状态时。</p><h3 id="provide"><a href="#provide" class="headerlink" title="provide"></a>provide</h3><p><code>provide</code> 允许你定义一些数据或方法，这些数据或方法可以被注入到任何子孙组件中。它通常在组件的 <code>setup</code> 函数中使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> sharedData = <span class="string">&#x27;shared data&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 provide 提供数据</span></span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;sharedDataKey&#x27;</span>, sharedData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也可以提供响应式的数据</span></span><br><span class="line">    <span class="keyword">const</span> sharedReactiveData = <span class="title class_">Vue</span>.<span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;sharedReactiveDataKey&#x27;</span>, sharedReactiveData);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="inject"><a href="#inject" class="headerlink" title="inject"></a>inject</h3><p><code>inject</code> 允许子孙组件接收由祖先组件提供的 <code>provide</code> 数据。它也通常在组件的 <code>setup</code> 函数中使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 inject 接收数据</span></span><br><span class="line">    <span class="keyword">const</span> sharedData = <span class="title function_">inject</span>(<span class="string">&#x27;sharedDataKey&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> sharedReactiveData = <span class="title function_">inject</span>(<span class="string">&#x27;sharedReactiveDataKey&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有找到对应 key 的数据，可以提供一个默认值</span></span><br><span class="line">    <span class="keyword">const</span> optionalData = <span class="title function_">inject</span>(<span class="string">&#x27;optionalDataKey&#x27;</span>, <span class="string">&#x27;default value&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      sharedData,</span><br><span class="line">      sharedReactiveData,</span><br><span class="line">      optionalData</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="注意：也可以把父组件的方法传给子组件（第二个参数换成函数名即可）"><a href="#注意：也可以把父组件的方法传给子组件（第二个参数换成函数名即可）" class="headerlink" title="注意：也可以把父组件的方法传给子组件（第二个参数换成函数名即可）"></a>注意：也可以把父组件的方法传给子组件（第二个参数换成函数名即可）</h3><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><strong>跨层级</strong>: <code>provide</code> 和 <code>inject</code> 可以跨越多个组件层级，不需要中间组件做任何处理。</li><li><strong>响应式</strong>: 当 <code>provide</code> 的数据是响应式的（例如使用 <code>reactive</code> 或 <code>ref</code> 创建），注入的数据也会保持响应式。</li><li><strong>非响应式默认值</strong>: 如果 <code>provide</code> 没有提供某个 key 的数据，而 <code>inject</code> 请求了这个 key，可以提供一个默认值。</li><li><strong>类型推断</strong>: 在 TypeScript 中使用 <code>provide</code> 和 <code>inject</code> 时，可以利用类型推断来提供更好的开发体验。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><code>provide</code> 和 <code>inject</code> 主要用于非父子组件间的通信，应当谨慎使用，以避免造成组件间的过度耦合。</li><li>在 Vue 3 中，<code>provide</code> 和 <code>inject</code> 是独立于 <code>props</code> 和 <code>events</code> 的，它们不会触发视图的更新，除非提供的数据是响应式的。</li><li>使用 <code>provide</code> 和 <code>inject</code> 时，应当确保提供的数据是不可变的，或者至少是响应式的，以避免状态管理上的问题。</li></ul><p><code>provide</code> 和 <code>inject</code> 提供了一种强大的机制来在组件树中传递数据，但应当谨慎使用，以保持代码的可维护性和清晰性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM初步学习</title>
      <link href="/2018/01/05/SSM%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/01/05/SSM%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM框架"><a href="#SSM框架" class="headerlink" title="SSM框架"></a>SSM框架</h1><h2 id="spring核心容器"><a href="#spring核心容器" class="headerlink" title="spring核心容器"></a>spring核心容器</h2><p>容器</p><p>bean</p><p>依赖注入</p><h3 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h3><p>使用对象：从主动new对象变成了<strong>外部提供</strong>，由IOC容器（外部）负责管理对象，被管理的对象叫做Bean。</p><p>DI：依赖注入，绑定两个对象之间的关系。</p><p>bean创建出来默认是单例模式，因此封装的model对象其实是不适合交给容器管理的。</p><h4 id="实例化bean的三种方式"><a href="#实例化bean的三种方式" class="headerlink" title="实例化bean的三种方式"></a>实例化bean的三种方式</h4><ol><li><p>通过构造方式（反射）</p></li><li><p>静态工厂（了解即可</p></li><li><p>实例化工厂</p></li><li><p>（重）FactoryBean接口</p></li><li><pre><code class="java">public class UserDaoFactory implements FactoryBean&lt;UserDao&gt; &#123;    @Override    public UserDao getObject() throws Exception &#123;        return new UserDaoImpl();    &#125;    @Override    public Class&lt;?&gt; getObjectType() &#123;        return UserDao.class;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">### 依赖注入的方式</span><br><span class="line"></span><br><span class="line">1. setter注入</span><br><span class="line">2. 构造器注入</span><br><span class="line">3. 自动装配（自动找寻set入口装配，所以set入口不能省略</span><br><span class="line">   - 按类型</span><br><span class="line">   - 按名称（不需要</span><br><span class="line"></span><br><span class="line">自动装配的优先级要小于setter和构造器</span><br><span class="line"></span><br><span class="line">### 核心容器总结</span><br><span class="line"></span><br><span class="line">#### 容器相关</span><br><span class="line"></span><br><span class="line">BeanFactory是IOC容器的顶层接口，是bean的延迟加载</span><br><span class="line"></span><br><span class="line">ApplicationContext是ioc的核心接口，是bean的立即加载</span><br><span class="line"></span><br><span class="line">![image-20241114210710832](C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20241114210710832.png)</span><br><span class="line"></span><br><span class="line"> ![image-20241114210845222](C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20241114210845222.png)</span><br><span class="line"></span><br><span class="line">## 注解开发</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">//创建新的命名空间context，需要包扫描</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=</span><br><span class="line">               &quot;http://www.springframework.org/schema/beans</span><br><span class="line">                http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">                http://www.springframework.org/schema/context</span><br><span class="line">                http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">&lt;!--    1.先创建命名空间context--&gt;</span><br><span class="line">&lt;!--    注解开发--&gt;</span><br><span class="line">&lt;!--    扫描组件配置--&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;org.demo&quot;/&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line">    &lt;bean id=<span class="string">&quot;userDao&quot;</span> class=<span class="string">&quot;org.demo.dao.impl.UserDaoImpl&quot;</span>/&gt;</span><br><span class="line"><span class="comment">//交给容器管理</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 按名称获取bean</span></span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) context.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>按名称注入不推荐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//不另命名</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> context.getBean(BookService.class);</span><br><span class="line"><span class="comment">//按类型获取bean</span></span><br><span class="line">        System.out.println(bookService);</span><br></pre></td></tr></table></figure><p><strong>不过表现层用@Controller，业务层@Service，数据层@Repository，只是便于区分，功能和component一样的</strong></p><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@ComponentSpan(&#123;&quot;org.demo&quot;,&quot;com.example&quot;&#125;)</span><span class="comment">//包扫描</span></span><br><span class="line"><span class="comment">//完全取代applicationContext.xml这个配置文件了</span></span><br></pre></td></tr></table></figure><h3 id="注解注入"><a href="#注解注入" class="headerlink" title="注解注入"></a>注解注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;命名&quot;)</span><span class="comment">//这个是给一个接口有两个实现类时，选择其中一个命名来的</span></span><br></pre></td></tr></table></figure><h2 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h2><p>在不惊动原始设计的基础上，为其增强功能的编程思想。 </p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20241114222040947.png" alt="image-20241114222040947"></p><p>将切入点和通知绑定的东西，<strong>叫做切面</strong>。</p><p>想要增强的共性功能，<strong>叫做通知</strong>。</p><p>通知类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//告诉扫描我是aop</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyNotice</span> &#123;</span><br><span class="line">    <span class="comment">//定义切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void org.demo.dao.BookDao.delete())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义通知，并切面：绑定通知和切入点关系</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;org.demo&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">//扫描切面的注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5个切面类型</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//定义切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* org.demo.dao.BookDao.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义通知，并切面：绑定通知和切入点关系</span></span><br><span class="line">    <span class="comment">//1.前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around start&quot;</span>);</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;around end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.后置通知（无论通知运行出不出错都执行</span></span><br><span class="line">    <span class="meta">@After(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.不出错后置执行</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.出错异常后执行</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假如有多个MyAdvice可以通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>来着控制切面类的执行顺序</p><h4 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&quot;execution(* org.demo.dao.BookDao.*(..))&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&quot;@annotation(包名.自定义注解)&quot;</span>)</span><br><span class="line"><span class="comment">//有该注解的方法生效</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 我随便写写，你随便看看 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到第五次元</title>
      <link href="/2018/01/05/hello-world/"/>
      <url>/2018/01/05/hello-world/</url>
      
        <content type="html"><![CDATA[<hr><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="欢迎来到第五次元"><a href="#欢迎来到第五次元" class="headerlink" title="欢迎来到第五次元"></a>欢迎来到第五次元</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库设计</title>
      <link href="/2018/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
      <url>/2018/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h2 id="线性表构建树结构"><a href="#线性表构建树结构" class="headerlink" title="线性表构建树结构"></a>线性表构建树结构</h2><p>大家都由根延伸而出，且根是一个虚无的东西.</p><p>如一个树形目录：</p><p>Directory（目录表）</p><p>一级目录深度为1，二级目录深度为2….</p><table><thead><tr><th>id</th><th>parent_id</th><th>name</th><th>deep</th></tr></thead><tbody><tr><td><strong>1</strong></td><td><strong>0</strong></td><td><strong>根（虚无，不显示）</strong></td><td>0</td></tr><tr><td>2</td><td>1</td><td>电子产品</td><td>1</td></tr><tr><td>3</td><td>1</td><td>家具</td><td>1</td></tr><tr><td>4</td><td>2</td><td>手机</td><td>2</td></tr><tr><td>5</td><td>3</td><td>沙发</td><td>2</td></tr></tbody></table><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="eg-用户注册"><a href="#eg-用户注册" class="headerlink" title="eg:用户注册"></a>eg:用户注册</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> RegisterUser(</span><br><span class="line">    <span class="keyword">IN</span> p_username <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    <span class="keyword">IN</span> p_email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    <span class="keyword">IN</span> p_password <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">OUT</span> p_result <span class="type">VARCHAR</span>(<span class="number">50</span>)  <span class="comment">-- 添加输出参数用于返回结果</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 声明变量用于存储插入的用户ID和检查结果</span></span><br><span class="line">    <span class="keyword">DECLARE</span> v_user_id <span class="type">INT</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> v_username_exists <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> v_email_exists <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 开始事务</span></span><br><span class="line">    <span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 检查用户名是否存在</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> v_username_exists <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> p_username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 检查邮箱是否存在</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> v_email_exists <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> email <span class="operator">=</span> p_email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 如果用户名或邮箱已存在，则设置结果为失败并回滚事务</span></span><br><span class="line">    IF v_username_exists <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">OR</span> v_email_exists <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">SET</span> p_result <span class="operator">=</span> <span class="string">&#x27;FAILURE&#x27;</span>;</span><br><span class="line">        <span class="keyword">ROLLBACK</span>;</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">        <span class="comment">-- 插入用户信息</span></span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, email, password)</span><br><span class="line">        <span class="keyword">VALUES</span> (p_username, p_email, p_password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- 获取插入的用户ID</span></span><br><span class="line">        <span class="keyword">SET</span> v_user_id <span class="operator">=</span> LAST_INSERT_ID();</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- 提交事务</span></span><br><span class="line">        <span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- 设置结果为成功</span></span><br><span class="line">        <span class="keyword">SET</span> p_result <span class="operator">=</span> <span class="string">&#x27;SUCCESS&#x27;</span>;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h4 id="后端接收："><a href="#后端接收：" class="headerlink" title="后端接收："></a>后端接收：</h4><p>在Spring Boot项目中结合MyBatis调用存储过程的方法如下：</p><p>创建一个Mapper接口，用于定义调用存储过程的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yourapp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    String <span class="title function_">registerUser</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                        <span class="meta">@Param(&quot;email&quot;)</span> String email,</span></span><br><span class="line"><span class="params">                        <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，创建一个XML映射文件（例如<code>UserMapper.xml</code>），放在<code>src/main/resources/mapper</code>目录下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.yourapp.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;registerUser&quot;</span> <span class="attr">statementType</span>=<span class="string">&quot;CALLABLE&quot;</span>&gt;</span></span><br><span class="line">        &#123;call RegisterUser(</span><br><span class="line">            #&#123;username, mode=IN, jdbcType=VARCHAR&#125;,</span><br><span class="line">            #&#123;email, mode=IN, jdbcType=VARCHAR&#125;,</span><br><span class="line">            #&#123;password, mode=IN, jdbcType=VARCHAR&#125;,</span><br><span class="line">            #&#123;result, mode=OUT, jdbcType=VARCHAR&#125;</span><br><span class="line">        )&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在，当你发送一个POST请求到<code>/register</code>端点时，Spring Boot将调用存储过程<code>RegisterUser</code>来执行用户注册操作，并返回结果。</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>避免使用物理删除，用户删除时，数据还是要保留，用is_delete保存是否删除。（逻辑删除）</p><p>在树形数据库表中，删除的时候需要判断孩子节点，所以需要创建<strong>存储过程</strong>。</p><h2 id="一些AI回答的问题"><a href="#一些AI回答的问题" class="headerlink" title="一些AI回答的问题"></a>一些AI回答的问题</h2><h3 id="PROCEDURE（存储过程）和FUNCTION（函数）"><a href="#PROCEDURE（存储过程）和FUNCTION（函数）" class="headerlink" title="PROCEDURE（存储过程）和FUNCTION（函数）"></a><code>PROCEDURE</code>（存储过程）和<code>FUNCTION</code>（函数）</h3><p>SQL中的<code>PROCEDURE</code>（存储过程）和<code>FUNCTION</code>（函数）都是预编译的SQL代码块，它们可以在数据库中存储并重复使用。尽管它们在某些方面相似，但它们之间存在一些关键区别：</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ol><li><p><strong>返回值</strong>：</p><ul><li><strong>PROCEDURE</strong>：可以有输出参数，但不直接返回值。</li><li><strong>FUNCTION</strong>：必须返回一个值。</li></ul></li><li><p><strong>调用方式</strong>：</p><ul><li><strong>PROCEDURE</strong>：通常通过<code>CALL</code>语句调用。</li><li><strong>FUNCTION</strong>：可以作为表达式的一部分在SQL查询中使用。</li></ul></li><li><p><strong>事务控制</strong>：</p><ul><li><strong>PROCEDURE</strong>：可以包含事务控制语句（如<code>COMMIT</code>和<code>ROLLBACK</code>）。</li><li><strong>FUNCTION</strong>：通常不允许包含事务控制语句。</li></ul></li><li><p><strong>副作用</strong>：</p><ul><li><strong>PROCEDURE</strong>：可以有副作用，如修改表数据。</li><li><strong>FUNCTION</strong>：通常不应该有副作用，应该保持幂等性。</li></ul></li></ol><h4 id="用户注册逻辑的选择"><a href="#用户注册逻辑的选择" class="headerlink" title="用户注册逻辑的选择"></a>用户注册逻辑的选择</h4><p>对于用户注册的逻辑，通常更适合使用<code>PROCEDURE</code>，因为：</p><ul><li>注册过程可能涉及多个步骤（如插入用户信息、发送验证邮件等），这些步骤可以通过存储过程的逻辑来实现。</li><li>注册过程可能需要有副作用（如修改表数据）。</li><li>注册过程可能需要事务控制以确保数据的一致性。</li></ul><h4 id="示例：用户注册的存储过程"><a href="#示例：用户注册的存储过程" class="headerlink" title="示例：用户注册的存储过程"></a>示例：用户注册的存储过程</h4><p>以下是一个简单的用户注册存储过程的示例，假设我们有一个名为<code>users</code>的表，结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>存储过程如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> RegisterUser(</span><br><span class="line">    <span class="keyword">IN</span> p_username <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    <span class="keyword">IN</span> p_email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    <span class="keyword">IN</span> p_password <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 声明变量用于存储插入的用户ID</span></span><br><span class="line">    <span class="keyword">DECLARE</span> v_user_id <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 开始事务</span></span><br><span class="line">    <span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 插入用户信息</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, email, password)</span><br><span class="line">    <span class="keyword">VALUES</span> (p_username, p_email, p_password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 获取插入的用户ID</span></span><br><span class="line">    <span class="keyword">SET</span> v_user_id <span class="operator">=</span> LAST_INSERT_ID();</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 提交事务</span></span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 输出用户ID（可选）</span></span><br><span class="line">    <span class="keyword">SELECT</span> v_user_id <span class="keyword">AS</span> user_id;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h4 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> RegisterUser(<span class="string">&#x27;john_doe&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>, <span class="string">&#x27;hashed_password&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><ol><li><strong>参数</strong>：存储过程<code>RegisterUser</code>接受三个输入参数：<code>username</code>、<code>email</code>和<code>password</code>。</li><li><strong>事务控制</strong>：使用<code>START TRANSACTION</code>和<code>COMMIT</code>确保插入操作的原子性。</li><li><strong>插入操作</strong>：将用户信息插入到<code>users</code>表中。</li><li><strong>获取插入的用户ID</strong>：使用<code>LAST_INSERT_ID()</code>获取插入的用户ID，并将其存储在变量<code>v_user_id</code>中。</li><li><strong>输出用户ID</strong>：可以选择性地输出插入的用户ID。</li></ol><p>通过这种方式，用户注册的逻辑可以封装在一个存储过程中，便于管理和复用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式学习</title>
      <link href="/2018/01/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/01/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20241113154244223.png" alt="image-20241113154244223"></p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>类在jvm中加载时执行，只执行一次。</p><p>“静态代码块只执行一次”的意思是，在Java程序运行期间，当一个类被加载到Java虚拟机（JVM）时，与该类关联的静态代码块会被自动执行，而且这个执行过程只发生一次。</p><p>这里有几个关键点需要理解：</p><ol><li><strong>类加载</strong>：当程序首次引用一个类（例如，通过创建该类的实例，访问该类的静态方法或静态字段等），JVM会检查该类是否已经被加载。如果没有，JVM会加载该类，包括执行其静态初始化代码（即静态代码块）。</li><li><strong>静态代码块的执行</strong>：静态代码块在类加载过程中执行，而不是在创建类的实例时执行。这意味着，无论创建多少个类的实例，静态代码块都只会执行一次。</li><li><strong>只执行一次</strong>：静态代码块的执行与类的实例化无关。一旦类被加载，静态代码块就执行了，后续对类的任何引用（包括创建更多实例）都不会再次触发静态代码块的执行。</li></ol><p>这种特性使得静态代码块非常适合用于执行只需要进行一次的初始化操作，例如创建单例对象、初始化静态资源或设置全局配置等。</p><p>下面是一个简单的例子来说明这一点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main方法开始&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Example</span> <span class="variable">example1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line">        <span class="type">Example</span> <span class="variable">example2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;main方法结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，当你运行<code>main</code>方法时，输出将会是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">静态代码块执行</span><br><span class="line">main方法开始</span><br><span class="line">main方法结束</span><br></pre></td></tr></table></figure><p>尽管在<code>main</code>方法中创建了两个<code>Example</code>类的实例，但静态代码块只执行了一次。</p><h3 id="非静态代码块"><a href="#非静态代码块" class="headerlink" title="非静态代码块"></a>非静态代码块</h3><p><strong>非静态代码块（也称为实例初始化块）是在创建类的实例时执行的代码块，它不是在类加载时执行，而是在每次创建对象时都会执行</strong>。非静态代码块通常用于执行一些通用的实例初始化操作，这些操作对于类的所有实例都是相同的。</p><p>非静态代码块的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 初始化代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非静态代码块在每次创建类的实例时都会执行，并且在构造函数之前执行。如果有多个非静态代码块，它们将按照在类中出现的顺序依次执行。</p><p>下面是一个简单的例子来说明非静态代码块的执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="comment">// 非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;非静态代码块执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Example</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main方法开始&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Example</span> <span class="variable">example1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line">        <span class="type">Example</span> <span class="variable">example2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;main方法结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，当你运行<code>main</code>方法时，输出将会是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">main方法开始</span><br><span class="line">非静态代码块执行</span><br><span class="line">构造函数执行</span><br><span class="line">非静态代码块执行</span><br><span class="line">构造函数执行</span><br><span class="line">main方法结束</span><br></pre></td></tr></table></figure><p>可以看到，每次创建<code>Example</code>类的实例时，非静态代码块都会执行，并且在构造函数之前执行。因此，对于<code>example1</code>和<code>example2</code>两个实例，非静态代码块都分别执行了一次。</p><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>在Java中，<code>static</code>关键字用于定义类级别的成员，这些成员不属于类的任何特定实例，而是属于整个类。静态代码块（也称为静态初始化器）是使用<code>static</code>关键字声明的代码块，它在类被加载到JVM（Java虚拟机）时执行，并且只执行一次。</p><p>静态代码块通常用于初始化静态变量或执行一些只需要在类加载时执行一次的操作。它的基本语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 静态代码块</span></span><br><span class="line">        <span class="comment">// 初始化静态变量或执行其他操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在你提供的代码片段中，静态代码块用于创建一个<code>Singleton</code>类的实例，并将其赋值给静态变量<code>instance</code>。这是一种常见的单例模式实现方式，称为“饿汉式”单例模式。以下是完整的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块，在类加载时执行，创建Singleton实例</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数，防止外部创建实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供公共的静态方法获取Singleton实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，当<code>Singleton</code>类被加载到JVM时，静态代码块会自动执行，并创建一个<code>Singleton</code>实例。之后，通过调用<code>getInstance()</code>方法，可以获取这个已经创建的实例。由于静态代码块只执行一次，因此<code>Singleton</code>类也只会创建一个实例，从而实现了单例模式。</p><p>需要注意的是，这种“饿汉式”单例模式在类加载时就创建了实例，可能会造成资源浪费，如果实例的创建需要消耗大量资源或者实例的创建依赖于某些配置信息，那么可以考虑使用“懒汉式”单例模式，在第一次使用时再创建实例。</p><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式：内部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式1：线程不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单工厂：把耦合逻辑抽象出来不影响业务代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">CreateCoffee</span><span class="params">(String coffeeType)</span> &#123;</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (coffeeType.equalsIgnoreCase(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> <span class="title class_">ACoffee</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (coffeeType.equalsIgnoreCase(<span class="string">&quot;B&quot;</span>)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> <span class="title class_">BCoffee</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;没有您需要的咖啡种类！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单工厂：把耦合逻辑抽象出来不影响业务代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Coffee <span class="title function_">CreateCoffee</span><span class="params">(String coffeeType)</span> &#123;</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (coffeeType.equalsIgnoreCase(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> <span class="title class_">ACoffee</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (coffeeType.equalsIgnoreCase(<span class="string">&quot;B&quot;</span>)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> <span class="title class_">BCoffee</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;没有您需要的咖啡种类！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p><strong>只考虑生产同级别的产品（如下面这个例子只生产咖啡！）</strong></p><p>对多态性的完美应用。</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20241113145642446.png" alt="image-20241113145642446"></p><p>工厂也抽象出一个工厂接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂抽象接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后咖啡分类继承出不同的咖啡工厂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承工厂接口，专门生成A咖啡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ACoffeeFactory</span> <span class="keyword">implements</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ACoffee</span>();</span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咖啡店实现类写入工厂接口的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 咖啡店负责创造实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeStore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CoffeeFactory coffeeFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCoffeeFactory</span><span class="params">(CoffeeFactory coffeeFactory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.coffeeFactory = coffeeFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">OrderCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> <span class="built_in">this</span>.coffeeFactory.createCoffee();</span><br><span class="line">        coffee.addMike();</span><br><span class="line">        coffee.addSugar();</span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>多级别产品的生产，不只咖啡。</p><p><img src="C:\Users\86158\AppData\Roaming\Typora\typora-user-images\image-20241113150311054.png" alt="image-20241113150311054"></p><h3 id="简单工厂-配置文件"><a href="#简单工厂-配置文件" class="headerlink" title="简单工厂+配置文件"></a>简单工厂+配置文件</h3><p>通过配置文件来进行工厂类的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, Coffee&gt; coffeeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Coffee&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载类的时候加载配置文件，只加载一次（所有使用静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//创建配置文件对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> CoffeeFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            prop.load(is);</span><br><span class="line">            <span class="comment">//获取map中的所有key成为一个set</span></span><br><span class="line">            Set&lt;Object&gt; keySet = prop.keySet();</span><br><span class="line">            <span class="keyword">for</span> (Object key : keySet) &#123;</span><br><span class="line">                <span class="comment">//获取类名(引用路径</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> prop.getProperty(key.toString());</span><br><span class="line">                <span class="comment">//通过反射创建类</span></span><br><span class="line">                <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);<span class="comment">//获取反射对象</span></span><br><span class="line">                <span class="type">Coffee</span> <span class="variable">o</span> <span class="operator">=</span> (Coffee) clazz.newInstance();</span><br><span class="line">                coffeeMap.put((String) key, o);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Coffee <span class="title function_">CreateCoffee</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffeeMap.get(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置文件，等于左边与传入type一致</span></span><br><span class="line">A=com.patterns.factory_config.ACoffee</span><br><span class="line">B=com.patterns.factory_config.BCoffee</span><br></pre></td></tr></table></figure><h4 id="注意：反射"><a href="#注意：反射" class="headerlink" title="注意：反射"></a>注意：反射</h4><p>这行代码的作用是从类路径（classpath）中加载名为 <code>bean.properties</code> 的资源文件，并将其包装在一个 <code>InputStream</code> 对象中。以下是对这行代码的详细解释：</p><p><strong>代码解析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> CoffeeFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li><p>**<code>CoffeeFactory.class</code>**：</p><ul><li>获取 <code>CoffeeFactory</code> 类的 <code>Class</code> 对象。</li></ul></li><li><p>**<code>.getClassLoader()</code>**：</p><ul><li>调用 <code>Class</code> 对象的 <code>getClassLoader()</code> 方法，获取加载该类的类加载器（<code>ClassLoader</code>）。</li></ul></li><li><p>**<code>.getResourceAsStream(&quot;bean.properties&quot;)</code>**：</p><ul><li>调用类加载器的 <code>getResourceAsStream(String name)</code> 方法，传入资源文件的名称 <code>&quot;bean.properties&quot;</code>。</li><li><code>getResourceAsStream</code> 方法会在类路径（classpath）中查找指定的资源文件，并返回一个 <code>InputStream</code> 对象，如果找不到该资源文件，则返回 <code>null</code>。</li></ul></li></ol><p><strong>类路径（classpath）</strong></p><p>类路径是 Java 虚拟机（JVM）用于查找类文件和资源文件的路径集合。它可以包含以下几种类型的路径：</p><ul><li>编译后的 <code>.class</code> 文件所在的目录。</li><li>JAR 文件中的类和资源。</li><li>通过 <code>-classpath</code> 或 <code>-cp</code> 命令行选项指定的路径。</li></ul><p><strong>资源文件的加载</strong></p><p>在 Java 应用程序中，资源文件通常放在类路径下的某个目录中，例如 <code>src/main/resources</code> 目录（对于 Maven 项目）。通过 <code>getResourceAsStream</code> 方法，可以方便地从类路径中加载这些资源文件。</p><p><strong>示例</strong></p><p>假设你的项目结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">└── main</span><br><span class="line">    └── resources</span><br><span class="line">        └── bean.properties</span><br></pre></td></tr></table></figure><p>并且你在代码中使用上述行来加载 <code>bean.properties</code> 文件，那么 JVM 会在类路径中查找该文件，并将其包装在一个 <code>InputStream</code> 对象中。</p><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> CoffeeFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Resource not found: bean.properties&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(is);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 properties 对象</span></span><br><span class="line">            System.out.println(properties.getProperty(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用 <code>getResourceAsStream</code> 方法加载 <code>bean.properties</code> 文件，并将其内容读取到一个 <code>Properties</code> 对象中，然后输出某个属性的值。</p><p>通过这种方式，可以方便地在 Java 应用程序中加载和使用资源文件。</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h3><p>代理类是在内存中动态生成的，我们看不到的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态代理jdk</span></span><br><span class="line"><span class="comment"> * 获取代理对象的工厂类</span></span><br><span class="line"><span class="comment"> * jdk提供了proxy代理对象</span></span><br><span class="line"><span class="comment"> * 代理对象也继承了对应接口（SellTickets）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">TrainStation</span> <span class="variable">trainStation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SellTickets <span class="title function_">getProxyObject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Proxy.newProxyInstance(形参如下)</span></span><br><span class="line"><span class="comment">         * ClassLoader loader:类加载器，用于加载代理类，可以通过类目标对象获取类加载器</span></span><br><span class="line"><span class="comment">         *  Class&lt;?&gt;[] interfaces：代理类和目标对象都实现的接口的字节码对象</span></span><br><span class="line"><span class="comment">         *  InvocationHandler h：代理对象调用的处理程序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">SellTickets</span> <span class="variable">proxyObject</span> <span class="operator">=</span> (SellTickets) Proxy.newProxyInstance(</span><br><span class="line">                trainStation.getClass().getClassLoader(),</span><br><span class="line">                trainStation.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy 被调用方法的代理实例(就是proxyObject一般不使用</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method 对应于在代理实例上调用的接口方法的 &#123;<span class="doctag">@code</span> Method&#125; 实例。</span></span><br><span class="line"><span class="comment">                     * 该 &#123;<span class="doctag">@code</span> Method&#125; 对象的声明类将是方法声明所在的接口，</span></span><br><span class="line"><span class="comment">                     * 这可能是代理接口继承该方法通过的超接口。</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args 包含在代理实例上的方法调用中传递的参数值的对象数组，</span></span><br><span class="line"><span class="comment">                     * 或者如果接口方法不接受参数，则为 &#123;<span class="doctag">@code</span> null&#125;。</span></span><br><span class="line"><span class="comment">                     * 原始类型的参数被包装在适当的原始包装器类的实例中，</span></span><br><span class="line"><span class="comment">                     * 例如 &#123;<span class="doctag">@code</span> java.lang.Integer&#125; 或 &#123;<span class="doctag">@code</span> java.lang.Boolean&#125;。</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;收取代理费用100元！（jdk动态代理）&quot;</span>);</span><br><span class="line">                        <span class="comment">//使用反射调用method对象</span></span><br><span class="line">                        <span class="comment">//这个意思就是调用了目标对象中的method方法了（如sell，当然别的也行，obj就是返回值</span></span><br><span class="line">                        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> method.invoke(trainStation, args);</span><br><span class="line">                        <span class="keyword">return</span> object;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> proxyObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理模式区别"><a href="#代理模式区别" class="headerlink" title="代理模式区别:"></a>代理模式区别:</h3><p>静态代理：如果有新的方法需要添加，那么接口、目标对象、代理对象就都要新增方法，而动态代理就不用在代理对象中再新增，因为我们使用了代理工厂对代理对象进行动态代理。</p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
